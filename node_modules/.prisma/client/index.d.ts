
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Faculty
 * 
 */
export type Faculty = $Result.DefaultSelection<Prisma.$FacultyPayload>
/**
 * Model Pulpit
 * 
 */
export type Pulpit = $Result.DefaultSelection<Prisma.$PulpitPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model AuditoriumType
 * 
 */
export type AuditoriumType = $Result.DefaultSelection<Prisma.$AuditoriumTypePayload>
/**
 * Model Auditorium
 * 
 */
export type Auditorium = $Result.DefaultSelection<Prisma.$AuditoriumPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Faculties
 * const faculties = await prisma.faculty.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Faculties
   * const faculties = await prisma.faculty.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.faculty`: Exposes CRUD operations for the **Faculty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faculties
    * const faculties = await prisma.faculty.findMany()
    * ```
    */
  get faculty(): Prisma.FacultyDelegate<ExtArgs>;

  /**
   * `prisma.pulpit`: Exposes CRUD operations for the **Pulpit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pulpits
    * const pulpits = await prisma.pulpit.findMany()
    * ```
    */
  get pulpit(): Prisma.PulpitDelegate<ExtArgs>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs>;

  /**
   * `prisma.auditoriumType`: Exposes CRUD operations for the **AuditoriumType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditoriumTypes
    * const auditoriumTypes = await prisma.auditoriumType.findMany()
    * ```
    */
  get auditoriumType(): Prisma.AuditoriumTypeDelegate<ExtArgs>;

  /**
   * `prisma.auditorium`: Exposes CRUD operations for the **Auditorium** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auditoriums
    * const auditoriums = await prisma.auditorium.findMany()
    * ```
    */
  get auditorium(): Prisma.AuditoriumDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.0
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Faculty: 'Faculty',
    Pulpit: 'Pulpit',
    Subject: 'Subject',
    Teacher: 'Teacher',
    AuditoriumType: 'AuditoriumType',
    Auditorium: 'Auditorium'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'faculty' | 'pulpit' | 'subject' | 'teacher' | 'auditoriumType' | 'auditorium'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Faculty: {
        payload: Prisma.$FacultyPayload<ExtArgs>
        fields: Prisma.FacultyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacultyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacultyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          findFirst: {
            args: Prisma.FacultyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacultyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          findMany: {
            args: Prisma.FacultyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>[]
          }
          create: {
            args: Prisma.FacultyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          createMany: {
            args: Prisma.FacultyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FacultyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          update: {
            args: Prisma.FacultyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          deleteMany: {
            args: Prisma.FacultyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FacultyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FacultyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FacultyPayload>
          }
          aggregate: {
            args: Prisma.FacultyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFaculty>
          }
          groupBy: {
            args: Prisma.FacultyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FacultyGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacultyCountArgs<ExtArgs>,
            result: $Utils.Optional<FacultyCountAggregateOutputType> | number
          }
        }
      }
      Pulpit: {
        payload: Prisma.$PulpitPayload<ExtArgs>
        fields: Prisma.PulpitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PulpitFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PulpitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PulpitFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PulpitPayload>
          }
          findFirst: {
            args: Prisma.PulpitFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PulpitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PulpitFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PulpitPayload>
          }
          findMany: {
            args: Prisma.PulpitFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PulpitPayload>[]
          }
          create: {
            args: Prisma.PulpitCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PulpitPayload>
          }
          createMany: {
            args: Prisma.PulpitCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PulpitDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PulpitPayload>
          }
          update: {
            args: Prisma.PulpitUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PulpitPayload>
          }
          deleteMany: {
            args: Prisma.PulpitDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PulpitUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PulpitUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PulpitPayload>
          }
          aggregate: {
            args: Prisma.PulpitAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePulpit>
          }
          groupBy: {
            args: Prisma.PulpitGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PulpitGroupByOutputType>[]
          }
          count: {
            args: Prisma.PulpitCountArgs<ExtArgs>,
            result: $Utils.Optional<PulpitCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>,
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>,
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      AuditoriumType: {
        payload: Prisma.$AuditoriumTypePayload<ExtArgs>
        fields: Prisma.AuditoriumTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditoriumTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditoriumTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumTypePayload>
          }
          findFirst: {
            args: Prisma.AuditoriumTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditoriumTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumTypePayload>
          }
          findMany: {
            args: Prisma.AuditoriumTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumTypePayload>[]
          }
          create: {
            args: Prisma.AuditoriumTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumTypePayload>
          }
          createMany: {
            args: Prisma.AuditoriumTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AuditoriumTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumTypePayload>
          }
          update: {
            args: Prisma.AuditoriumTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumTypePayload>
          }
          deleteMany: {
            args: Prisma.AuditoriumTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuditoriumTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuditoriumTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumTypePayload>
          }
          aggregate: {
            args: Prisma.AuditoriumTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuditoriumType>
          }
          groupBy: {
            args: Prisma.AuditoriumTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuditoriumTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditoriumTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<AuditoriumTypeCountAggregateOutputType> | number
          }
        }
      }
      Auditorium: {
        payload: Prisma.$AuditoriumPayload<ExtArgs>
        fields: Prisma.AuditoriumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditoriumFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditoriumFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumPayload>
          }
          findFirst: {
            args: Prisma.AuditoriumFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditoriumFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumPayload>
          }
          findMany: {
            args: Prisma.AuditoriumFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumPayload>[]
          }
          create: {
            args: Prisma.AuditoriumCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumPayload>
          }
          createMany: {
            args: Prisma.AuditoriumCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AuditoriumDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumPayload>
          }
          update: {
            args: Prisma.AuditoriumUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumPayload>
          }
          deleteMany: {
            args: Prisma.AuditoriumDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuditoriumUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuditoriumUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuditoriumPayload>
          }
          aggregate: {
            args: Prisma.AuditoriumAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuditorium>
          }
          groupBy: {
            args: Prisma.AuditoriumGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuditoriumGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditoriumCountArgs<ExtArgs>,
            result: $Utils.Optional<AuditoriumCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FacultyCountOutputType
   */

  export type FacultyCountOutputType = {
    Pulpit: number
  }

  export type FacultyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Pulpit?: boolean | FacultyCountOutputTypeCountPulpitArgs
  }

  // Custom InputTypes

  /**
   * FacultyCountOutputType without action
   */
  export type FacultyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacultyCountOutputType
     */
    select?: FacultyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FacultyCountOutputType without action
   */
  export type FacultyCountOutputTypeCountPulpitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PulpitWhereInput
  }



  /**
   * Count Type PulpitCountOutputType
   */

  export type PulpitCountOutputType = {
    Subject: number
    Teacher: number
  }

  export type PulpitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Subject?: boolean | PulpitCountOutputTypeCountSubjectArgs
    Teacher?: boolean | PulpitCountOutputTypeCountTeacherArgs
  }

  // Custom InputTypes

  /**
   * PulpitCountOutputType without action
   */
  export type PulpitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PulpitCountOutputType
     */
    select?: PulpitCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PulpitCountOutputType without action
   */
  export type PulpitCountOutputTypeCountSubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }


  /**
   * PulpitCountOutputType without action
   */
  export type PulpitCountOutputTypeCountTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
  }



  /**
   * Count Type AuditoriumTypeCountOutputType
   */

  export type AuditoriumTypeCountOutputType = {
    Auditorium: number
  }

  export type AuditoriumTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Auditorium?: boolean | AuditoriumTypeCountOutputTypeCountAuditoriumArgs
  }

  // Custom InputTypes

  /**
   * AuditoriumTypeCountOutputType without action
   */
  export type AuditoriumTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumTypeCountOutputType
     */
    select?: AuditoriumTypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AuditoriumTypeCountOutputType without action
   */
  export type AuditoriumTypeCountOutputTypeCountAuditoriumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditoriumWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Faculty
   */

  export type AggregateFaculty = {
    _count: FacultyCountAggregateOutputType | null
    _min: FacultyMinAggregateOutputType | null
    _max: FacultyMaxAggregateOutputType | null
  }

  export type FacultyMinAggregateOutputType = {
    faculty: string | null
    faculty_name: string | null
  }

  export type FacultyMaxAggregateOutputType = {
    faculty: string | null
    faculty_name: string | null
  }

  export type FacultyCountAggregateOutputType = {
    faculty: number
    faculty_name: number
    _all: number
  }


  export type FacultyMinAggregateInputType = {
    faculty?: true
    faculty_name?: true
  }

  export type FacultyMaxAggregateInputType = {
    faculty?: true
    faculty_name?: true
  }

  export type FacultyCountAggregateInputType = {
    faculty?: true
    faculty_name?: true
    _all?: true
  }

  export type FacultyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faculty to aggregate.
     */
    where?: FacultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faculties to fetch.
     */
    orderBy?: FacultyOrderByWithRelationInput | FacultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faculties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faculties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Faculties
    **/
    _count?: true | FacultyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacultyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacultyMaxAggregateInputType
  }

  export type GetFacultyAggregateType<T extends FacultyAggregateArgs> = {
        [P in keyof T & keyof AggregateFaculty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaculty[P]>
      : GetScalarType<T[P], AggregateFaculty[P]>
  }




  export type FacultyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacultyWhereInput
    orderBy?: FacultyOrderByWithAggregationInput | FacultyOrderByWithAggregationInput[]
    by: FacultyScalarFieldEnum[] | FacultyScalarFieldEnum
    having?: FacultyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacultyCountAggregateInputType | true
    _min?: FacultyMinAggregateInputType
    _max?: FacultyMaxAggregateInputType
  }

  export type FacultyGroupByOutputType = {
    faculty: string
    faculty_name: string | null
    _count: FacultyCountAggregateOutputType | null
    _min: FacultyMinAggregateOutputType | null
    _max: FacultyMaxAggregateOutputType | null
  }

  type GetFacultyGroupByPayload<T extends FacultyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacultyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacultyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacultyGroupByOutputType[P]>
            : GetScalarType<T[P], FacultyGroupByOutputType[P]>
        }
      >
    >


  export type FacultySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    faculty?: boolean
    faculty_name?: boolean
    Pulpit?: boolean | Faculty$PulpitArgs<ExtArgs>
    _count?: boolean | FacultyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faculty"]>

  export type FacultySelectScalar = {
    faculty?: boolean
    faculty_name?: boolean
  }

  export type FacultyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Pulpit?: boolean | Faculty$PulpitArgs<ExtArgs>
    _count?: boolean | FacultyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FacultyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Faculty"
    objects: {
      Pulpit: Prisma.$PulpitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      faculty: string
      faculty_name: string | null
    }, ExtArgs["result"]["faculty"]>
    composites: {}
  }


  type FacultyGetPayload<S extends boolean | null | undefined | FacultyDefaultArgs> = $Result.GetResult<Prisma.$FacultyPayload, S>

  type FacultyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FacultyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FacultyCountAggregateInputType | true
    }

  export interface FacultyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Faculty'], meta: { name: 'Faculty' } }
    /**
     * Find zero or one Faculty that matches the filter.
     * @param {FacultyFindUniqueArgs} args - Arguments to find a Faculty
     * @example
     * // Get one Faculty
     * const faculty = await prisma.faculty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacultyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyFindUniqueArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Faculty that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacultyFindUniqueOrThrowArgs} args - Arguments to find a Faculty
     * @example
     * // Get one Faculty
     * const faculty = await prisma.faculty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacultyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Faculty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyFindFirstArgs} args - Arguments to find a Faculty
     * @example
     * // Get one Faculty
     * const faculty = await prisma.faculty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacultyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyFindFirstArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Faculty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyFindFirstOrThrowArgs} args - Arguments to find a Faculty
     * @example
     * // Get one Faculty
     * const faculty = await prisma.faculty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacultyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Faculties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faculties
     * const faculties = await prisma.faculty.findMany()
     * 
     * // Get first 10 Faculties
     * const faculties = await prisma.faculty.findMany({ take: 10 })
     * 
     * // Only select the `faculty`
     * const facultyWithFacultyOnly = await prisma.faculty.findMany({ select: { faculty: true } })
     * 
    **/
    findMany<T extends FacultyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Faculty.
     * @param {FacultyCreateArgs} args - Arguments to create a Faculty.
     * @example
     * // Create one Faculty
     * const Faculty = await prisma.faculty.create({
     *   data: {
     *     // ... data to create a Faculty
     *   }
     * })
     * 
    **/
    create<T extends FacultyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyCreateArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Faculties.
     *     @param {FacultyCreateManyArgs} args - Arguments to create many Faculties.
     *     @example
     *     // Create many Faculties
     *     const faculty = await prisma.faculty.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacultyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Faculty.
     * @param {FacultyDeleteArgs} args - Arguments to delete one Faculty.
     * @example
     * // Delete one Faculty
     * const Faculty = await prisma.faculty.delete({
     *   where: {
     *     // ... filter to delete one Faculty
     *   }
     * })
     * 
    **/
    delete<T extends FacultyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyDeleteArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Faculty.
     * @param {FacultyUpdateArgs} args - Arguments to update one Faculty.
     * @example
     * // Update one Faculty
     * const faculty = await prisma.faculty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacultyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyUpdateArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Faculties.
     * @param {FacultyDeleteManyArgs} args - Arguments to filter Faculties to delete.
     * @example
     * // Delete a few Faculties
     * const { count } = await prisma.faculty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacultyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacultyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faculties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faculties
     * const faculty = await prisma.faculty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacultyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Faculty.
     * @param {FacultyUpsertArgs} args - Arguments to update or create a Faculty.
     * @example
     * // Update or create a Faculty
     * const faculty = await prisma.faculty.upsert({
     *   create: {
     *     // ... data to create a Faculty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Faculty we want to update
     *   }
     * })
    **/
    upsert<T extends FacultyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FacultyUpsertArgs<ExtArgs>>
    ): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Faculties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyCountArgs} args - Arguments to filter Faculties to count.
     * @example
     * // Count the number of Faculties
     * const count = await prisma.faculty.count({
     *   where: {
     *     // ... the filter for the Faculties we want to count
     *   }
     * })
    **/
    count<T extends FacultyCountArgs>(
      args?: Subset<T, FacultyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacultyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Faculty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacultyAggregateArgs>(args: Subset<T, FacultyAggregateArgs>): Prisma.PrismaPromise<GetFacultyAggregateType<T>>

    /**
     * Group by Faculty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacultyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacultyGroupByArgs['orderBy'] }
        : { orderBy?: FacultyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacultyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacultyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Faculty model
   */
  readonly fields: FacultyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Faculty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacultyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Pulpit<T extends Faculty$PulpitArgs<ExtArgs> = {}>(args?: Subset<T, Faculty$PulpitArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Faculty model
   */ 
  interface FacultyFieldRefs {
    readonly faculty: FieldRef<"Faculty", 'String'>
    readonly faculty_name: FieldRef<"Faculty", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Faculty findUnique
   */
  export type FacultyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter, which Faculty to fetch.
     */
    where: FacultyWhereUniqueInput
  }


  /**
   * Faculty findUniqueOrThrow
   */
  export type FacultyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter, which Faculty to fetch.
     */
    where: FacultyWhereUniqueInput
  }


  /**
   * Faculty findFirst
   */
  export type FacultyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter, which Faculty to fetch.
     */
    where?: FacultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faculties to fetch.
     */
    orderBy?: FacultyOrderByWithRelationInput | FacultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faculties.
     */
    cursor?: FacultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faculties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faculties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faculties.
     */
    distinct?: FacultyScalarFieldEnum | FacultyScalarFieldEnum[]
  }


  /**
   * Faculty findFirstOrThrow
   */
  export type FacultyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter, which Faculty to fetch.
     */
    where?: FacultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faculties to fetch.
     */
    orderBy?: FacultyOrderByWithRelationInput | FacultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faculties.
     */
    cursor?: FacultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faculties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faculties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faculties.
     */
    distinct?: FacultyScalarFieldEnum | FacultyScalarFieldEnum[]
  }


  /**
   * Faculty findMany
   */
  export type FacultyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter, which Faculties to fetch.
     */
    where?: FacultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faculties to fetch.
     */
    orderBy?: FacultyOrderByWithRelationInput | FacultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Faculties.
     */
    cursor?: FacultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faculties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faculties.
     */
    skip?: number
    distinct?: FacultyScalarFieldEnum | FacultyScalarFieldEnum[]
  }


  /**
   * Faculty create
   */
  export type FacultyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * The data needed to create a Faculty.
     */
    data: XOR<FacultyCreateInput, FacultyUncheckedCreateInput>
  }


  /**
   * Faculty createMany
   */
  export type FacultyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Faculties.
     */
    data: FacultyCreateManyInput | FacultyCreateManyInput[]
  }


  /**
   * Faculty update
   */
  export type FacultyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * The data needed to update a Faculty.
     */
    data: XOR<FacultyUpdateInput, FacultyUncheckedUpdateInput>
    /**
     * Choose, which Faculty to update.
     */
    where: FacultyWhereUniqueInput
  }


  /**
   * Faculty updateMany
   */
  export type FacultyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Faculties.
     */
    data: XOR<FacultyUpdateManyMutationInput, FacultyUncheckedUpdateManyInput>
    /**
     * Filter which Faculties to update
     */
    where?: FacultyWhereInput
  }


  /**
   * Faculty upsert
   */
  export type FacultyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * The filter to search for the Faculty to update in case it exists.
     */
    where: FacultyWhereUniqueInput
    /**
     * In case the Faculty found by the `where` argument doesn't exist, create a new Faculty with this data.
     */
    create: XOR<FacultyCreateInput, FacultyUncheckedCreateInput>
    /**
     * In case the Faculty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacultyUpdateInput, FacultyUncheckedUpdateInput>
  }


  /**
   * Faculty delete
   */
  export type FacultyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacultyInclude<ExtArgs> | null
    /**
     * Filter which Faculty to delete.
     */
    where: FacultyWhereUniqueInput
  }


  /**
   * Faculty deleteMany
   */
  export type FacultyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faculties to delete
     */
    where?: FacultyWhereInput
  }


  /**
   * Faculty.Pulpit
   */
  export type Faculty$PulpitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
    where?: PulpitWhereInput
    orderBy?: PulpitOrderByWithRelationInput | PulpitOrderByWithRelationInput[]
    cursor?: PulpitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PulpitScalarFieldEnum | PulpitScalarFieldEnum[]
  }


  /**
   * Faculty without action
   */
  export type FacultyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faculty
     */
    select?: FacultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacultyInclude<ExtArgs> | null
  }



  /**
   * Model Pulpit
   */

  export type AggregatePulpit = {
    _count: PulpitCountAggregateOutputType | null
    _min: PulpitMinAggregateOutputType | null
    _max: PulpitMaxAggregateOutputType | null
  }

  export type PulpitMinAggregateOutputType = {
    pulpit: string | null
    pulpit_name: string | null
    faculty: string | null
  }

  export type PulpitMaxAggregateOutputType = {
    pulpit: string | null
    pulpit_name: string | null
    faculty: string | null
  }

  export type PulpitCountAggregateOutputType = {
    pulpit: number
    pulpit_name: number
    faculty: number
    _all: number
  }


  export type PulpitMinAggregateInputType = {
    pulpit?: true
    pulpit_name?: true
    faculty?: true
  }

  export type PulpitMaxAggregateInputType = {
    pulpit?: true
    pulpit_name?: true
    faculty?: true
  }

  export type PulpitCountAggregateInputType = {
    pulpit?: true
    pulpit_name?: true
    faculty?: true
    _all?: true
  }

  export type PulpitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pulpit to aggregate.
     */
    where?: PulpitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pulpits to fetch.
     */
    orderBy?: PulpitOrderByWithRelationInput | PulpitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PulpitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pulpits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pulpits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pulpits
    **/
    _count?: true | PulpitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PulpitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PulpitMaxAggregateInputType
  }

  export type GetPulpitAggregateType<T extends PulpitAggregateArgs> = {
        [P in keyof T & keyof AggregatePulpit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePulpit[P]>
      : GetScalarType<T[P], AggregatePulpit[P]>
  }




  export type PulpitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PulpitWhereInput
    orderBy?: PulpitOrderByWithAggregationInput | PulpitOrderByWithAggregationInput[]
    by: PulpitScalarFieldEnum[] | PulpitScalarFieldEnum
    having?: PulpitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PulpitCountAggregateInputType | true
    _min?: PulpitMinAggregateInputType
    _max?: PulpitMaxAggregateInputType
  }

  export type PulpitGroupByOutputType = {
    pulpit: string
    pulpit_name: string | null
    faculty: string
    _count: PulpitCountAggregateOutputType | null
    _min: PulpitMinAggregateOutputType | null
    _max: PulpitMaxAggregateOutputType | null
  }

  type GetPulpitGroupByPayload<T extends PulpitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PulpitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PulpitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PulpitGroupByOutputType[P]>
            : GetScalarType<T[P], PulpitGroupByOutputType[P]>
        }
      >
    >


  export type PulpitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pulpit?: boolean
    pulpit_name?: boolean
    faculty?: boolean
    Faculty?: boolean | FacultyDefaultArgs<ExtArgs>
    Subject?: boolean | Pulpit$SubjectArgs<ExtArgs>
    Teacher?: boolean | Pulpit$TeacherArgs<ExtArgs>
    _count?: boolean | PulpitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pulpit"]>

  export type PulpitSelectScalar = {
    pulpit?: boolean
    pulpit_name?: boolean
    faculty?: boolean
  }

  export type PulpitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Faculty?: boolean | FacultyDefaultArgs<ExtArgs>
    Subject?: boolean | Pulpit$SubjectArgs<ExtArgs>
    Teacher?: boolean | Pulpit$TeacherArgs<ExtArgs>
    _count?: boolean | PulpitCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PulpitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pulpit"
    objects: {
      Faculty: Prisma.$FacultyPayload<ExtArgs>
      Subject: Prisma.$SubjectPayload<ExtArgs>[]
      Teacher: Prisma.$TeacherPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      pulpit: string
      pulpit_name: string | null
      faculty: string
    }, ExtArgs["result"]["pulpit"]>
    composites: {}
  }


  type PulpitGetPayload<S extends boolean | null | undefined | PulpitDefaultArgs> = $Result.GetResult<Prisma.$PulpitPayload, S>

  type PulpitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PulpitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PulpitCountAggregateInputType | true
    }

  export interface PulpitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pulpit'], meta: { name: 'Pulpit' } }
    /**
     * Find zero or one Pulpit that matches the filter.
     * @param {PulpitFindUniqueArgs} args - Arguments to find a Pulpit
     * @example
     * // Get one Pulpit
     * const pulpit = await prisma.pulpit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PulpitFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PulpitFindUniqueArgs<ExtArgs>>
    ): Prisma__PulpitClient<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pulpit that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PulpitFindUniqueOrThrowArgs} args - Arguments to find a Pulpit
     * @example
     * // Get one Pulpit
     * const pulpit = await prisma.pulpit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PulpitFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PulpitFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PulpitClient<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pulpit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PulpitFindFirstArgs} args - Arguments to find a Pulpit
     * @example
     * // Get one Pulpit
     * const pulpit = await prisma.pulpit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PulpitFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PulpitFindFirstArgs<ExtArgs>>
    ): Prisma__PulpitClient<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pulpit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PulpitFindFirstOrThrowArgs} args - Arguments to find a Pulpit
     * @example
     * // Get one Pulpit
     * const pulpit = await prisma.pulpit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PulpitFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PulpitFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PulpitClient<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pulpits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PulpitFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pulpits
     * const pulpits = await prisma.pulpit.findMany()
     * 
     * // Get first 10 Pulpits
     * const pulpits = await prisma.pulpit.findMany({ take: 10 })
     * 
     * // Only select the `pulpit`
     * const pulpitWithPulpitOnly = await prisma.pulpit.findMany({ select: { pulpit: true } })
     * 
    **/
    findMany<T extends PulpitFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PulpitFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pulpit.
     * @param {PulpitCreateArgs} args - Arguments to create a Pulpit.
     * @example
     * // Create one Pulpit
     * const Pulpit = await prisma.pulpit.create({
     *   data: {
     *     // ... data to create a Pulpit
     *   }
     * })
     * 
    **/
    create<T extends PulpitCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PulpitCreateArgs<ExtArgs>>
    ): Prisma__PulpitClient<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pulpits.
     *     @param {PulpitCreateManyArgs} args - Arguments to create many Pulpits.
     *     @example
     *     // Create many Pulpits
     *     const pulpit = await prisma.pulpit.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PulpitCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PulpitCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pulpit.
     * @param {PulpitDeleteArgs} args - Arguments to delete one Pulpit.
     * @example
     * // Delete one Pulpit
     * const Pulpit = await prisma.pulpit.delete({
     *   where: {
     *     // ... filter to delete one Pulpit
     *   }
     * })
     * 
    **/
    delete<T extends PulpitDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PulpitDeleteArgs<ExtArgs>>
    ): Prisma__PulpitClient<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pulpit.
     * @param {PulpitUpdateArgs} args - Arguments to update one Pulpit.
     * @example
     * // Update one Pulpit
     * const pulpit = await prisma.pulpit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PulpitUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PulpitUpdateArgs<ExtArgs>>
    ): Prisma__PulpitClient<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pulpits.
     * @param {PulpitDeleteManyArgs} args - Arguments to filter Pulpits to delete.
     * @example
     * // Delete a few Pulpits
     * const { count } = await prisma.pulpit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PulpitDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PulpitDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pulpits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PulpitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pulpits
     * const pulpit = await prisma.pulpit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PulpitUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PulpitUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pulpit.
     * @param {PulpitUpsertArgs} args - Arguments to update or create a Pulpit.
     * @example
     * // Update or create a Pulpit
     * const pulpit = await prisma.pulpit.upsert({
     *   create: {
     *     // ... data to create a Pulpit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pulpit we want to update
     *   }
     * })
    **/
    upsert<T extends PulpitUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PulpitUpsertArgs<ExtArgs>>
    ): Prisma__PulpitClient<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pulpits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PulpitCountArgs} args - Arguments to filter Pulpits to count.
     * @example
     * // Count the number of Pulpits
     * const count = await prisma.pulpit.count({
     *   where: {
     *     // ... the filter for the Pulpits we want to count
     *   }
     * })
    **/
    count<T extends PulpitCountArgs>(
      args?: Subset<T, PulpitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PulpitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pulpit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PulpitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PulpitAggregateArgs>(args: Subset<T, PulpitAggregateArgs>): Prisma.PrismaPromise<GetPulpitAggregateType<T>>

    /**
     * Group by Pulpit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PulpitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PulpitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PulpitGroupByArgs['orderBy'] }
        : { orderBy?: PulpitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PulpitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPulpitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pulpit model
   */
  readonly fields: PulpitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pulpit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PulpitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Faculty<T extends FacultyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FacultyDefaultArgs<ExtArgs>>): Prisma__FacultyClient<$Result.GetResult<Prisma.$FacultyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Subject<T extends Pulpit$SubjectArgs<ExtArgs> = {}>(args?: Subset<T, Pulpit$SubjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    Teacher<T extends Pulpit$TeacherArgs<ExtArgs> = {}>(args?: Subset<T, Pulpit$TeacherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pulpit model
   */ 
  interface PulpitFieldRefs {
    readonly pulpit: FieldRef<"Pulpit", 'String'>
    readonly pulpit_name: FieldRef<"Pulpit", 'String'>
    readonly faculty: FieldRef<"Pulpit", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Pulpit findUnique
   */
  export type PulpitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
    /**
     * Filter, which Pulpit to fetch.
     */
    where: PulpitWhereUniqueInput
  }


  /**
   * Pulpit findUniqueOrThrow
   */
  export type PulpitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
    /**
     * Filter, which Pulpit to fetch.
     */
    where: PulpitWhereUniqueInput
  }


  /**
   * Pulpit findFirst
   */
  export type PulpitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
    /**
     * Filter, which Pulpit to fetch.
     */
    where?: PulpitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pulpits to fetch.
     */
    orderBy?: PulpitOrderByWithRelationInput | PulpitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pulpits.
     */
    cursor?: PulpitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pulpits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pulpits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pulpits.
     */
    distinct?: PulpitScalarFieldEnum | PulpitScalarFieldEnum[]
  }


  /**
   * Pulpit findFirstOrThrow
   */
  export type PulpitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
    /**
     * Filter, which Pulpit to fetch.
     */
    where?: PulpitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pulpits to fetch.
     */
    orderBy?: PulpitOrderByWithRelationInput | PulpitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pulpits.
     */
    cursor?: PulpitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pulpits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pulpits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pulpits.
     */
    distinct?: PulpitScalarFieldEnum | PulpitScalarFieldEnum[]
  }


  /**
   * Pulpit findMany
   */
  export type PulpitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
    /**
     * Filter, which Pulpits to fetch.
     */
    where?: PulpitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pulpits to fetch.
     */
    orderBy?: PulpitOrderByWithRelationInput | PulpitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pulpits.
     */
    cursor?: PulpitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pulpits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pulpits.
     */
    skip?: number
    distinct?: PulpitScalarFieldEnum | PulpitScalarFieldEnum[]
  }


  /**
   * Pulpit create
   */
  export type PulpitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
    /**
     * The data needed to create a Pulpit.
     */
    data: XOR<PulpitCreateInput, PulpitUncheckedCreateInput>
  }


  /**
   * Pulpit createMany
   */
  export type PulpitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pulpits.
     */
    data: PulpitCreateManyInput | PulpitCreateManyInput[]
  }


  /**
   * Pulpit update
   */
  export type PulpitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
    /**
     * The data needed to update a Pulpit.
     */
    data: XOR<PulpitUpdateInput, PulpitUncheckedUpdateInput>
    /**
     * Choose, which Pulpit to update.
     */
    where: PulpitWhereUniqueInput
  }


  /**
   * Pulpit updateMany
   */
  export type PulpitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pulpits.
     */
    data: XOR<PulpitUpdateManyMutationInput, PulpitUncheckedUpdateManyInput>
    /**
     * Filter which Pulpits to update
     */
    where?: PulpitWhereInput
  }


  /**
   * Pulpit upsert
   */
  export type PulpitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
    /**
     * The filter to search for the Pulpit to update in case it exists.
     */
    where: PulpitWhereUniqueInput
    /**
     * In case the Pulpit found by the `where` argument doesn't exist, create a new Pulpit with this data.
     */
    create: XOR<PulpitCreateInput, PulpitUncheckedCreateInput>
    /**
     * In case the Pulpit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PulpitUpdateInput, PulpitUncheckedUpdateInput>
  }


  /**
   * Pulpit delete
   */
  export type PulpitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
    /**
     * Filter which Pulpit to delete.
     */
    where: PulpitWhereUniqueInput
  }


  /**
   * Pulpit deleteMany
   */
  export type PulpitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pulpits to delete
     */
    where?: PulpitWhereInput
  }


  /**
   * Pulpit.Subject
   */
  export type Pulpit$SubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Pulpit.Teacher
   */
  export type Pulpit$TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    cursor?: TeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }


  /**
   * Pulpit without action
   */
  export type PulpitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pulpit
     */
    select?: PulpitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PulpitInclude<ExtArgs> | null
  }



  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectMinAggregateOutputType = {
    subject: string | null
    subject_name: string | null
    pulpit: string | null
  }

  export type SubjectMaxAggregateOutputType = {
    subject: string | null
    subject_name: string | null
    pulpit: string | null
  }

  export type SubjectCountAggregateOutputType = {
    subject: number
    subject_name: number
    pulpit: number
    _all: number
  }


  export type SubjectMinAggregateInputType = {
    subject?: true
    subject_name?: true
    pulpit?: true
  }

  export type SubjectMaxAggregateInputType = {
    subject?: true
    subject_name?: true
    pulpit?: true
  }

  export type SubjectCountAggregateInputType = {
    subject?: true
    subject_name?: true
    pulpit?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    subject: string
    subject_name: string
    pulpit: string
    _count: SubjectCountAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    subject?: boolean
    subject_name?: boolean
    pulpit?: boolean
    Pulpit?: boolean | PulpitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    subject?: boolean
    subject_name?: boolean
    pulpit?: boolean
  }

  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Pulpit?: boolean | PulpitDefaultArgs<ExtArgs>
  }


  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      Pulpit: Prisma.$PulpitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      subject: string
      subject_name: string
      pulpit: string
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }


  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Subject that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `subject`
     * const subjectWithSubjectOnly = await prisma.subject.findMany({ select: { subject: true } })
     * 
    **/
    findMany<T extends SubjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
    **/
    create<T extends SubjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Subjects.
     *     @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     *     @example
     *     // Create many Subjects
     *     const subject = await prisma.subject.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
    **/
    delete<T extends SubjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
    **/
    upsert<T extends SubjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>
    ): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Pulpit<T extends PulpitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PulpitDefaultArgs<ExtArgs>>): Prisma__PulpitClient<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Subject model
   */ 
  interface SubjectFieldRefs {
    readonly subject: FieldRef<"Subject", 'String'>
    readonly subject_name: FieldRef<"Subject", 'String'>
    readonly pulpit: FieldRef<"Subject", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }


  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }


  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
  }


  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
  }


  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }


  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
  }


  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubjectInclude<ExtArgs> | null
  }



  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherMinAggregateOutputType = {
    teacher: string | null
    teacher_name: string | null
    pulpit: string | null
  }

  export type TeacherMaxAggregateOutputType = {
    teacher: string | null
    teacher_name: string | null
    pulpit: string | null
  }

  export type TeacherCountAggregateOutputType = {
    teacher: number
    teacher_name: number
    pulpit: number
    _all: number
  }


  export type TeacherMinAggregateInputType = {
    teacher?: true
    teacher_name?: true
    pulpit?: true
  }

  export type TeacherMaxAggregateInputType = {
    teacher?: true
    teacher_name?: true
    pulpit?: true
  }

  export type TeacherCountAggregateInputType = {
    teacher?: true
    teacher_name?: true
    pulpit?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    teacher: string
    teacher_name: string | null
    pulpit: string
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacher?: boolean
    teacher_name?: boolean
    pulpit?: boolean
    Pulpit?: boolean | PulpitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    teacher?: boolean
    teacher_name?: boolean
    pulpit?: boolean
  }

  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Pulpit?: boolean | PulpitDefaultArgs<ExtArgs>
  }


  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      Pulpit: Prisma.$PulpitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      teacher: string
      teacher_name: string | null
      pulpit: string
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }


  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeacherFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Teacher that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeacherFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `teacher`
     * const teacherWithTeacherOnly = await prisma.teacher.findMany({ select: { teacher: true } })
     * 
    **/
    findMany<T extends TeacherFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
    **/
    create<T extends TeacherCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Teachers.
     *     @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     *     @example
     *     // Create many Teachers
     *     const teacher = await prisma.teacher.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeacherCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
    **/
    delete<T extends TeacherDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeacherUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeacherDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeacherUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
    **/
    upsert<T extends TeacherUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Pulpit<T extends PulpitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PulpitDefaultArgs<ExtArgs>>): Prisma__PulpitClient<$Result.GetResult<Prisma.$PulpitPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Teacher model
   */ 
  interface TeacherFieldRefs {
    readonly teacher: FieldRef<"Teacher", 'String'>
    readonly teacher_name: FieldRef<"Teacher", 'String'>
    readonly pulpit: FieldRef<"Teacher", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }


  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }


  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }


  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }


  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }


  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }


  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
  }


  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }


  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
  }


  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }


  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }


  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
  }


  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude<ExtArgs> | null
  }



  /**
   * Model AuditoriumType
   */

  export type AggregateAuditoriumType = {
    _count: AuditoriumTypeCountAggregateOutputType | null
    _min: AuditoriumTypeMinAggregateOutputType | null
    _max: AuditoriumTypeMaxAggregateOutputType | null
  }

  export type AuditoriumTypeMinAggregateOutputType = {
    auditorium_type: string | null
    auditorium_typename: string | null
  }

  export type AuditoriumTypeMaxAggregateOutputType = {
    auditorium_type: string | null
    auditorium_typename: string | null
  }

  export type AuditoriumTypeCountAggregateOutputType = {
    auditorium_type: number
    auditorium_typename: number
    _all: number
  }


  export type AuditoriumTypeMinAggregateInputType = {
    auditorium_type?: true
    auditorium_typename?: true
  }

  export type AuditoriumTypeMaxAggregateInputType = {
    auditorium_type?: true
    auditorium_typename?: true
  }

  export type AuditoriumTypeCountAggregateInputType = {
    auditorium_type?: true
    auditorium_typename?: true
    _all?: true
  }

  export type AuditoriumTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditoriumType to aggregate.
     */
    where?: AuditoriumTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditoriumTypes to fetch.
     */
    orderBy?: AuditoriumTypeOrderByWithRelationInput | AuditoriumTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditoriumTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditoriumTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditoriumTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditoriumTypes
    **/
    _count?: true | AuditoriumTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditoriumTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditoriumTypeMaxAggregateInputType
  }

  export type GetAuditoriumTypeAggregateType<T extends AuditoriumTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditoriumType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditoriumType[P]>
      : GetScalarType<T[P], AggregateAuditoriumType[P]>
  }




  export type AuditoriumTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditoriumTypeWhereInput
    orderBy?: AuditoriumTypeOrderByWithAggregationInput | AuditoriumTypeOrderByWithAggregationInput[]
    by: AuditoriumTypeScalarFieldEnum[] | AuditoriumTypeScalarFieldEnum
    having?: AuditoriumTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditoriumTypeCountAggregateInputType | true
    _min?: AuditoriumTypeMinAggregateInputType
    _max?: AuditoriumTypeMaxAggregateInputType
  }

  export type AuditoriumTypeGroupByOutputType = {
    auditorium_type: string
    auditorium_typename: string
    _count: AuditoriumTypeCountAggregateOutputType | null
    _min: AuditoriumTypeMinAggregateOutputType | null
    _max: AuditoriumTypeMaxAggregateOutputType | null
  }

  type GetAuditoriumTypeGroupByPayload<T extends AuditoriumTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditoriumTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditoriumTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditoriumTypeGroupByOutputType[P]>
            : GetScalarType<T[P], AuditoriumTypeGroupByOutputType[P]>
        }
      >
    >


  export type AuditoriumTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    auditorium_type?: boolean
    auditorium_typename?: boolean
    Auditorium?: boolean | AuditoriumType$AuditoriumArgs<ExtArgs>
    _count?: boolean | AuditoriumTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditoriumType"]>

  export type AuditoriumTypeSelectScalar = {
    auditorium_type?: boolean
    auditorium_typename?: boolean
  }

  export type AuditoriumTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Auditorium?: boolean | AuditoriumType$AuditoriumArgs<ExtArgs>
    _count?: boolean | AuditoriumTypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AuditoriumTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditoriumType"
    objects: {
      Auditorium: Prisma.$AuditoriumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      auditorium_type: string
      auditorium_typename: string
    }, ExtArgs["result"]["auditoriumType"]>
    composites: {}
  }


  type AuditoriumTypeGetPayload<S extends boolean | null | undefined | AuditoriumTypeDefaultArgs> = $Result.GetResult<Prisma.$AuditoriumTypePayload, S>

  type AuditoriumTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditoriumTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditoriumTypeCountAggregateInputType | true
    }

  export interface AuditoriumTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditoriumType'], meta: { name: 'AuditoriumType' } }
    /**
     * Find zero or one AuditoriumType that matches the filter.
     * @param {AuditoriumTypeFindUniqueArgs} args - Arguments to find a AuditoriumType
     * @example
     * // Get one AuditoriumType
     * const auditoriumType = await prisma.auditoriumType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuditoriumTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__AuditoriumTypeClient<$Result.GetResult<Prisma.$AuditoriumTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AuditoriumType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuditoriumTypeFindUniqueOrThrowArgs} args - Arguments to find a AuditoriumType
     * @example
     * // Get one AuditoriumType
     * const auditoriumType = await prisma.auditoriumType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuditoriumTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuditoriumTypeClient<$Result.GetResult<Prisma.$AuditoriumTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AuditoriumType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumTypeFindFirstArgs} args - Arguments to find a AuditoriumType
     * @example
     * // Get one AuditoriumType
     * const auditoriumType = await prisma.auditoriumType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuditoriumTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumTypeFindFirstArgs<ExtArgs>>
    ): Prisma__AuditoriumTypeClient<$Result.GetResult<Prisma.$AuditoriumTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AuditoriumType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumTypeFindFirstOrThrowArgs} args - Arguments to find a AuditoriumType
     * @example
     * // Get one AuditoriumType
     * const auditoriumType = await prisma.auditoriumType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuditoriumTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuditoriumTypeClient<$Result.GetResult<Prisma.$AuditoriumTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AuditoriumTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditoriumTypes
     * const auditoriumTypes = await prisma.auditoriumType.findMany()
     * 
     * // Get first 10 AuditoriumTypes
     * const auditoriumTypes = await prisma.auditoriumType.findMany({ take: 10 })
     * 
     * // Only select the `auditorium_type`
     * const auditoriumTypeWithAuditorium_typeOnly = await prisma.auditoriumType.findMany({ select: { auditorium_type: true } })
     * 
    **/
    findMany<T extends AuditoriumTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriumTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AuditoriumType.
     * @param {AuditoriumTypeCreateArgs} args - Arguments to create a AuditoriumType.
     * @example
     * // Create one AuditoriumType
     * const AuditoriumType = await prisma.auditoriumType.create({
     *   data: {
     *     // ... data to create a AuditoriumType
     *   }
     * })
     * 
    **/
    create<T extends AuditoriumTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumTypeCreateArgs<ExtArgs>>
    ): Prisma__AuditoriumTypeClient<$Result.GetResult<Prisma.$AuditoriumTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AuditoriumTypes.
     *     @param {AuditoriumTypeCreateManyArgs} args - Arguments to create many AuditoriumTypes.
     *     @example
     *     // Create many AuditoriumTypes
     *     const auditoriumType = await prisma.auditoriumType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuditoriumTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuditoriumType.
     * @param {AuditoriumTypeDeleteArgs} args - Arguments to delete one AuditoriumType.
     * @example
     * // Delete one AuditoriumType
     * const AuditoriumType = await prisma.auditoriumType.delete({
     *   where: {
     *     // ... filter to delete one AuditoriumType
     *   }
     * })
     * 
    **/
    delete<T extends AuditoriumTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumTypeDeleteArgs<ExtArgs>>
    ): Prisma__AuditoriumTypeClient<$Result.GetResult<Prisma.$AuditoriumTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AuditoriumType.
     * @param {AuditoriumTypeUpdateArgs} args - Arguments to update one AuditoriumType.
     * @example
     * // Update one AuditoriumType
     * const auditoriumType = await prisma.auditoriumType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuditoriumTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumTypeUpdateArgs<ExtArgs>>
    ): Prisma__AuditoriumTypeClient<$Result.GetResult<Prisma.$AuditoriumTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AuditoriumTypes.
     * @param {AuditoriumTypeDeleteManyArgs} args - Arguments to filter AuditoriumTypes to delete.
     * @example
     * // Delete a few AuditoriumTypes
     * const { count } = await prisma.auditoriumType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuditoriumTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditoriumTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditoriumTypes
     * const auditoriumType = await prisma.auditoriumType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuditoriumTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditoriumType.
     * @param {AuditoriumTypeUpsertArgs} args - Arguments to update or create a AuditoriumType.
     * @example
     * // Update or create a AuditoriumType
     * const auditoriumType = await prisma.auditoriumType.upsert({
     *   create: {
     *     // ... data to create a AuditoriumType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditoriumType we want to update
     *   }
     * })
    **/
    upsert<T extends AuditoriumTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumTypeUpsertArgs<ExtArgs>>
    ): Prisma__AuditoriumTypeClient<$Result.GetResult<Prisma.$AuditoriumTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AuditoriumTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumTypeCountArgs} args - Arguments to filter AuditoriumTypes to count.
     * @example
     * // Count the number of AuditoriumTypes
     * const count = await prisma.auditoriumType.count({
     *   where: {
     *     // ... the filter for the AuditoriumTypes we want to count
     *   }
     * })
    **/
    count<T extends AuditoriumTypeCountArgs>(
      args?: Subset<T, AuditoriumTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditoriumTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditoriumType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditoriumTypeAggregateArgs>(args: Subset<T, AuditoriumTypeAggregateArgs>): Prisma.PrismaPromise<GetAuditoriumTypeAggregateType<T>>

    /**
     * Group by AuditoriumType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditoriumTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditoriumTypeGroupByArgs['orderBy'] }
        : { orderBy?: AuditoriumTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditoriumTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditoriumTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditoriumType model
   */
  readonly fields: AuditoriumTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditoriumType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditoriumTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Auditorium<T extends AuditoriumType$AuditoriumArgs<ExtArgs> = {}>(args?: Subset<T, AuditoriumType$AuditoriumArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriumPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AuditoriumType model
   */ 
  interface AuditoriumTypeFieldRefs {
    readonly auditorium_type: FieldRef<"AuditoriumType", 'String'>
    readonly auditorium_typename: FieldRef<"AuditoriumType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AuditoriumType findUnique
   */
  export type AuditoriumTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumType
     */
    select?: AuditoriumTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumTypeInclude<ExtArgs> | null
    /**
     * Filter, which AuditoriumType to fetch.
     */
    where: AuditoriumTypeWhereUniqueInput
  }


  /**
   * AuditoriumType findUniqueOrThrow
   */
  export type AuditoriumTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumType
     */
    select?: AuditoriumTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumTypeInclude<ExtArgs> | null
    /**
     * Filter, which AuditoriumType to fetch.
     */
    where: AuditoriumTypeWhereUniqueInput
  }


  /**
   * AuditoriumType findFirst
   */
  export type AuditoriumTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumType
     */
    select?: AuditoriumTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumTypeInclude<ExtArgs> | null
    /**
     * Filter, which AuditoriumType to fetch.
     */
    where?: AuditoriumTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditoriumTypes to fetch.
     */
    orderBy?: AuditoriumTypeOrderByWithRelationInput | AuditoriumTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditoriumTypes.
     */
    cursor?: AuditoriumTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditoriumTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditoriumTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditoriumTypes.
     */
    distinct?: AuditoriumTypeScalarFieldEnum | AuditoriumTypeScalarFieldEnum[]
  }


  /**
   * AuditoriumType findFirstOrThrow
   */
  export type AuditoriumTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumType
     */
    select?: AuditoriumTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumTypeInclude<ExtArgs> | null
    /**
     * Filter, which AuditoriumType to fetch.
     */
    where?: AuditoriumTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditoriumTypes to fetch.
     */
    orderBy?: AuditoriumTypeOrderByWithRelationInput | AuditoriumTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditoriumTypes.
     */
    cursor?: AuditoriumTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditoriumTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditoriumTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditoriumTypes.
     */
    distinct?: AuditoriumTypeScalarFieldEnum | AuditoriumTypeScalarFieldEnum[]
  }


  /**
   * AuditoriumType findMany
   */
  export type AuditoriumTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumType
     */
    select?: AuditoriumTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumTypeInclude<ExtArgs> | null
    /**
     * Filter, which AuditoriumTypes to fetch.
     */
    where?: AuditoriumTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditoriumTypes to fetch.
     */
    orderBy?: AuditoriumTypeOrderByWithRelationInput | AuditoriumTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditoriumTypes.
     */
    cursor?: AuditoriumTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditoriumTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditoriumTypes.
     */
    skip?: number
    distinct?: AuditoriumTypeScalarFieldEnum | AuditoriumTypeScalarFieldEnum[]
  }


  /**
   * AuditoriumType create
   */
  export type AuditoriumTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumType
     */
    select?: AuditoriumTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditoriumType.
     */
    data: XOR<AuditoriumTypeCreateInput, AuditoriumTypeUncheckedCreateInput>
  }


  /**
   * AuditoriumType createMany
   */
  export type AuditoriumTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditoriumTypes.
     */
    data: AuditoriumTypeCreateManyInput | AuditoriumTypeCreateManyInput[]
  }


  /**
   * AuditoriumType update
   */
  export type AuditoriumTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumType
     */
    select?: AuditoriumTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditoriumType.
     */
    data: XOR<AuditoriumTypeUpdateInput, AuditoriumTypeUncheckedUpdateInput>
    /**
     * Choose, which AuditoriumType to update.
     */
    where: AuditoriumTypeWhereUniqueInput
  }


  /**
   * AuditoriumType updateMany
   */
  export type AuditoriumTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditoriumTypes.
     */
    data: XOR<AuditoriumTypeUpdateManyMutationInput, AuditoriumTypeUncheckedUpdateManyInput>
    /**
     * Filter which AuditoriumTypes to update
     */
    where?: AuditoriumTypeWhereInput
  }


  /**
   * AuditoriumType upsert
   */
  export type AuditoriumTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumType
     */
    select?: AuditoriumTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditoriumType to update in case it exists.
     */
    where: AuditoriumTypeWhereUniqueInput
    /**
     * In case the AuditoriumType found by the `where` argument doesn't exist, create a new AuditoriumType with this data.
     */
    create: XOR<AuditoriumTypeCreateInput, AuditoriumTypeUncheckedCreateInput>
    /**
     * In case the AuditoriumType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditoriumTypeUpdateInput, AuditoriumTypeUncheckedUpdateInput>
  }


  /**
   * AuditoriumType delete
   */
  export type AuditoriumTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumType
     */
    select?: AuditoriumTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumTypeInclude<ExtArgs> | null
    /**
     * Filter which AuditoriumType to delete.
     */
    where: AuditoriumTypeWhereUniqueInput
  }


  /**
   * AuditoriumType deleteMany
   */
  export type AuditoriumTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditoriumTypes to delete
     */
    where?: AuditoriumTypeWhereInput
  }


  /**
   * AuditoriumType.Auditorium
   */
  export type AuditoriumType$AuditoriumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
    where?: AuditoriumWhereInput
    orderBy?: AuditoriumOrderByWithRelationInput | AuditoriumOrderByWithRelationInput[]
    cursor?: AuditoriumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditoriumScalarFieldEnum | AuditoriumScalarFieldEnum[]
  }


  /**
   * AuditoriumType without action
   */
  export type AuditoriumTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriumType
     */
    select?: AuditoriumTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumTypeInclude<ExtArgs> | null
  }



  /**
   * Model Auditorium
   */

  export type AggregateAuditorium = {
    _count: AuditoriumCountAggregateOutputType | null
    _avg: AuditoriumAvgAggregateOutputType | null
    _sum: AuditoriumSumAggregateOutputType | null
    _min: AuditoriumMinAggregateOutputType | null
    _max: AuditoriumMaxAggregateOutputType | null
  }

  export type AuditoriumAvgAggregateOutputType = {
    auditorium_capacity: number | null
  }

  export type AuditoriumSumAggregateOutputType = {
    auditorium_capacity: number | null
  }

  export type AuditoriumMinAggregateOutputType = {
    auditorium: string | null
    auditorium_name: string | null
    auditorium_capacity: number | null
    auditorium_type: string | null
  }

  export type AuditoriumMaxAggregateOutputType = {
    auditorium: string | null
    auditorium_name: string | null
    auditorium_capacity: number | null
    auditorium_type: string | null
  }

  export type AuditoriumCountAggregateOutputType = {
    auditorium: number
    auditorium_name: number
    auditorium_capacity: number
    auditorium_type: number
    _all: number
  }


  export type AuditoriumAvgAggregateInputType = {
    auditorium_capacity?: true
  }

  export type AuditoriumSumAggregateInputType = {
    auditorium_capacity?: true
  }

  export type AuditoriumMinAggregateInputType = {
    auditorium?: true
    auditorium_name?: true
    auditorium_capacity?: true
    auditorium_type?: true
  }

  export type AuditoriumMaxAggregateInputType = {
    auditorium?: true
    auditorium_name?: true
    auditorium_capacity?: true
    auditorium_type?: true
  }

  export type AuditoriumCountAggregateInputType = {
    auditorium?: true
    auditorium_name?: true
    auditorium_capacity?: true
    auditorium_type?: true
    _all?: true
  }

  export type AuditoriumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auditorium to aggregate.
     */
    where?: AuditoriumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auditoriums to fetch.
     */
    orderBy?: AuditoriumOrderByWithRelationInput | AuditoriumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditoriumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auditoriums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auditoriums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auditoriums
    **/
    _count?: true | AuditoriumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditoriumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditoriumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditoriumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditoriumMaxAggregateInputType
  }

  export type GetAuditoriumAggregateType<T extends AuditoriumAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditorium]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditorium[P]>
      : GetScalarType<T[P], AggregateAuditorium[P]>
  }




  export type AuditoriumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditoriumWhereInput
    orderBy?: AuditoriumOrderByWithAggregationInput | AuditoriumOrderByWithAggregationInput[]
    by: AuditoriumScalarFieldEnum[] | AuditoriumScalarFieldEnum
    having?: AuditoriumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditoriumCountAggregateInputType | true
    _avg?: AuditoriumAvgAggregateInputType
    _sum?: AuditoriumSumAggregateInputType
    _min?: AuditoriumMinAggregateInputType
    _max?: AuditoriumMaxAggregateInputType
  }

  export type AuditoriumGroupByOutputType = {
    auditorium: string
    auditorium_name: string | null
    auditorium_capacity: number | null
    auditorium_type: string
    _count: AuditoriumCountAggregateOutputType | null
    _avg: AuditoriumAvgAggregateOutputType | null
    _sum: AuditoriumSumAggregateOutputType | null
    _min: AuditoriumMinAggregateOutputType | null
    _max: AuditoriumMaxAggregateOutputType | null
  }

  type GetAuditoriumGroupByPayload<T extends AuditoriumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditoriumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditoriumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditoriumGroupByOutputType[P]>
            : GetScalarType<T[P], AuditoriumGroupByOutputType[P]>
        }
      >
    >


  export type AuditoriumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    auditorium?: boolean
    auditorium_name?: boolean
    auditorium_capacity?: boolean
    auditorium_type?: boolean
    AuditoriumType?: boolean | AuditoriumTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditorium"]>

  export type AuditoriumSelectScalar = {
    auditorium?: boolean
    auditorium_name?: boolean
    auditorium_capacity?: boolean
    auditorium_type?: boolean
  }

  export type AuditoriumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AuditoriumType?: boolean | AuditoriumTypeDefaultArgs<ExtArgs>
  }


  export type $AuditoriumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Auditorium"
    objects: {
      AuditoriumType: Prisma.$AuditoriumTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      auditorium: string
      auditorium_name: string | null
      auditorium_capacity: number | null
      auditorium_type: string
    }, ExtArgs["result"]["auditorium"]>
    composites: {}
  }


  type AuditoriumGetPayload<S extends boolean | null | undefined | AuditoriumDefaultArgs> = $Result.GetResult<Prisma.$AuditoriumPayload, S>

  type AuditoriumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditoriumFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditoriumCountAggregateInputType | true
    }

  export interface AuditoriumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auditorium'], meta: { name: 'Auditorium' } }
    /**
     * Find zero or one Auditorium that matches the filter.
     * @param {AuditoriumFindUniqueArgs} args - Arguments to find a Auditorium
     * @example
     * // Get one Auditorium
     * const auditorium = await prisma.auditorium.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuditoriumFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumFindUniqueArgs<ExtArgs>>
    ): Prisma__AuditoriumClient<$Result.GetResult<Prisma.$AuditoriumPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Auditorium that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuditoriumFindUniqueOrThrowArgs} args - Arguments to find a Auditorium
     * @example
     * // Get one Auditorium
     * const auditorium = await prisma.auditorium.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuditoriumFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuditoriumClient<$Result.GetResult<Prisma.$AuditoriumPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Auditorium that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumFindFirstArgs} args - Arguments to find a Auditorium
     * @example
     * // Get one Auditorium
     * const auditorium = await prisma.auditorium.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuditoriumFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumFindFirstArgs<ExtArgs>>
    ): Prisma__AuditoriumClient<$Result.GetResult<Prisma.$AuditoriumPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Auditorium that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumFindFirstOrThrowArgs} args - Arguments to find a Auditorium
     * @example
     * // Get one Auditorium
     * const auditorium = await prisma.auditorium.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuditoriumFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuditoriumClient<$Result.GetResult<Prisma.$AuditoriumPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Auditoriums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auditoriums
     * const auditoriums = await prisma.auditorium.findMany()
     * 
     * // Get first 10 Auditoriums
     * const auditoriums = await prisma.auditorium.findMany({ take: 10 })
     * 
     * // Only select the `auditorium`
     * const auditoriumWithAuditoriumOnly = await prisma.auditorium.findMany({ select: { auditorium: true } })
     * 
    **/
    findMany<T extends AuditoriumFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriumPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Auditorium.
     * @param {AuditoriumCreateArgs} args - Arguments to create a Auditorium.
     * @example
     * // Create one Auditorium
     * const Auditorium = await prisma.auditorium.create({
     *   data: {
     *     // ... data to create a Auditorium
     *   }
     * })
     * 
    **/
    create<T extends AuditoriumCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumCreateArgs<ExtArgs>>
    ): Prisma__AuditoriumClient<$Result.GetResult<Prisma.$AuditoriumPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Auditoriums.
     *     @param {AuditoriumCreateManyArgs} args - Arguments to create many Auditoriums.
     *     @example
     *     // Create many Auditoriums
     *     const auditorium = await prisma.auditorium.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuditoriumCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Auditorium.
     * @param {AuditoriumDeleteArgs} args - Arguments to delete one Auditorium.
     * @example
     * // Delete one Auditorium
     * const Auditorium = await prisma.auditorium.delete({
     *   where: {
     *     // ... filter to delete one Auditorium
     *   }
     * })
     * 
    **/
    delete<T extends AuditoriumDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumDeleteArgs<ExtArgs>>
    ): Prisma__AuditoriumClient<$Result.GetResult<Prisma.$AuditoriumPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Auditorium.
     * @param {AuditoriumUpdateArgs} args - Arguments to update one Auditorium.
     * @example
     * // Update one Auditorium
     * const auditorium = await prisma.auditorium.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuditoriumUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumUpdateArgs<ExtArgs>>
    ): Prisma__AuditoriumClient<$Result.GetResult<Prisma.$AuditoriumPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Auditoriums.
     * @param {AuditoriumDeleteManyArgs} args - Arguments to filter Auditoriums to delete.
     * @example
     * // Delete a few Auditoriums
     * const { count } = await prisma.auditorium.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuditoriumDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditoriumDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auditoriums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auditoriums
     * const auditorium = await prisma.auditorium.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuditoriumUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Auditorium.
     * @param {AuditoriumUpsertArgs} args - Arguments to update or create a Auditorium.
     * @example
     * // Update or create a Auditorium
     * const auditorium = await prisma.auditorium.upsert({
     *   create: {
     *     // ... data to create a Auditorium
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auditorium we want to update
     *   }
     * })
    **/
    upsert<T extends AuditoriumUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuditoriumUpsertArgs<ExtArgs>>
    ): Prisma__AuditoriumClient<$Result.GetResult<Prisma.$AuditoriumPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Auditoriums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumCountArgs} args - Arguments to filter Auditoriums to count.
     * @example
     * // Count the number of Auditoriums
     * const count = await prisma.auditorium.count({
     *   where: {
     *     // ... the filter for the Auditoriums we want to count
     *   }
     * })
    **/
    count<T extends AuditoriumCountArgs>(
      args?: Subset<T, AuditoriumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditoriumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auditorium.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditoriumAggregateArgs>(args: Subset<T, AuditoriumAggregateArgs>): Prisma.PrismaPromise<GetAuditoriumAggregateType<T>>

    /**
     * Group by Auditorium.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditoriumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditoriumGroupByArgs['orderBy'] }
        : { orderBy?: AuditoriumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditoriumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditoriumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Auditorium model
   */
  readonly fields: AuditoriumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Auditorium.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditoriumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    AuditoriumType<T extends AuditoriumTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuditoriumTypeDefaultArgs<ExtArgs>>): Prisma__AuditoriumTypeClient<$Result.GetResult<Prisma.$AuditoriumTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Auditorium model
   */ 
  interface AuditoriumFieldRefs {
    readonly auditorium: FieldRef<"Auditorium", 'String'>
    readonly auditorium_name: FieldRef<"Auditorium", 'String'>
    readonly auditorium_capacity: FieldRef<"Auditorium", 'Int'>
    readonly auditorium_type: FieldRef<"Auditorium", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Auditorium findUnique
   */
  export type AuditoriumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
    /**
     * Filter, which Auditorium to fetch.
     */
    where: AuditoriumWhereUniqueInput
  }


  /**
   * Auditorium findUniqueOrThrow
   */
  export type AuditoriumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
    /**
     * Filter, which Auditorium to fetch.
     */
    where: AuditoriumWhereUniqueInput
  }


  /**
   * Auditorium findFirst
   */
  export type AuditoriumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
    /**
     * Filter, which Auditorium to fetch.
     */
    where?: AuditoriumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auditoriums to fetch.
     */
    orderBy?: AuditoriumOrderByWithRelationInput | AuditoriumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auditoriums.
     */
    cursor?: AuditoriumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auditoriums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auditoriums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auditoriums.
     */
    distinct?: AuditoriumScalarFieldEnum | AuditoriumScalarFieldEnum[]
  }


  /**
   * Auditorium findFirstOrThrow
   */
  export type AuditoriumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
    /**
     * Filter, which Auditorium to fetch.
     */
    where?: AuditoriumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auditoriums to fetch.
     */
    orderBy?: AuditoriumOrderByWithRelationInput | AuditoriumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auditoriums.
     */
    cursor?: AuditoriumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auditoriums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auditoriums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auditoriums.
     */
    distinct?: AuditoriumScalarFieldEnum | AuditoriumScalarFieldEnum[]
  }


  /**
   * Auditorium findMany
   */
  export type AuditoriumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
    /**
     * Filter, which Auditoriums to fetch.
     */
    where?: AuditoriumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auditoriums to fetch.
     */
    orderBy?: AuditoriumOrderByWithRelationInput | AuditoriumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auditoriums.
     */
    cursor?: AuditoriumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auditoriums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auditoriums.
     */
    skip?: number
    distinct?: AuditoriumScalarFieldEnum | AuditoriumScalarFieldEnum[]
  }


  /**
   * Auditorium create
   */
  export type AuditoriumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
    /**
     * The data needed to create a Auditorium.
     */
    data: XOR<AuditoriumCreateInput, AuditoriumUncheckedCreateInput>
  }


  /**
   * Auditorium createMany
   */
  export type AuditoriumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auditoriums.
     */
    data: AuditoriumCreateManyInput | AuditoriumCreateManyInput[]
  }


  /**
   * Auditorium update
   */
  export type AuditoriumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
    /**
     * The data needed to update a Auditorium.
     */
    data: XOR<AuditoriumUpdateInput, AuditoriumUncheckedUpdateInput>
    /**
     * Choose, which Auditorium to update.
     */
    where: AuditoriumWhereUniqueInput
  }


  /**
   * Auditorium updateMany
   */
  export type AuditoriumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auditoriums.
     */
    data: XOR<AuditoriumUpdateManyMutationInput, AuditoriumUncheckedUpdateManyInput>
    /**
     * Filter which Auditoriums to update
     */
    where?: AuditoriumWhereInput
  }


  /**
   * Auditorium upsert
   */
  export type AuditoriumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
    /**
     * The filter to search for the Auditorium to update in case it exists.
     */
    where: AuditoriumWhereUniqueInput
    /**
     * In case the Auditorium found by the `where` argument doesn't exist, create a new Auditorium with this data.
     */
    create: XOR<AuditoriumCreateInput, AuditoriumUncheckedCreateInput>
    /**
     * In case the Auditorium was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditoriumUpdateInput, AuditoriumUncheckedUpdateInput>
  }


  /**
   * Auditorium delete
   */
  export type AuditoriumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
    /**
     * Filter which Auditorium to delete.
     */
    where: AuditoriumWhereUniqueInput
  }


  /**
   * Auditorium deleteMany
   */
  export type AuditoriumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auditoriums to delete
     */
    where?: AuditoriumWhereInput
  }


  /**
   * Auditorium without action
   */
  export type AuditoriumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auditorium
     */
    select?: AuditoriumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuditoriumInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FacultyScalarFieldEnum: {
    faculty: 'faculty',
    faculty_name: 'faculty_name'
  };

  export type FacultyScalarFieldEnum = (typeof FacultyScalarFieldEnum)[keyof typeof FacultyScalarFieldEnum]


  export const PulpitScalarFieldEnum: {
    pulpit: 'pulpit',
    pulpit_name: 'pulpit_name',
    faculty: 'faculty'
  };

  export type PulpitScalarFieldEnum = (typeof PulpitScalarFieldEnum)[keyof typeof PulpitScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    subject: 'subject',
    subject_name: 'subject_name',
    pulpit: 'pulpit'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    teacher: 'teacher',
    teacher_name: 'teacher_name',
    pulpit: 'pulpit'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const AuditoriumTypeScalarFieldEnum: {
    auditorium_type: 'auditorium_type',
    auditorium_typename: 'auditorium_typename'
  };

  export type AuditoriumTypeScalarFieldEnum = (typeof AuditoriumTypeScalarFieldEnum)[keyof typeof AuditoriumTypeScalarFieldEnum]


  export const AuditoriumScalarFieldEnum: {
    auditorium: 'auditorium',
    auditorium_name: 'auditorium_name',
    auditorium_capacity: 'auditorium_capacity',
    auditorium_type: 'auditorium_type'
  };

  export type AuditoriumScalarFieldEnum = (typeof AuditoriumScalarFieldEnum)[keyof typeof AuditoriumScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type FacultyWhereInput = {
    AND?: FacultyWhereInput | FacultyWhereInput[]
    OR?: FacultyWhereInput[]
    NOT?: FacultyWhereInput | FacultyWhereInput[]
    faculty?: StringFilter<"Faculty"> | string
    faculty_name?: StringNullableFilter<"Faculty"> | string | null
    Pulpit?: PulpitListRelationFilter
  }

  export type FacultyOrderByWithRelationInput = {
    faculty?: SortOrder
    faculty_name?: SortOrderInput | SortOrder
    Pulpit?: PulpitOrderByRelationAggregateInput
  }

  export type FacultyWhereUniqueInput = Prisma.AtLeast<{
    faculty?: string
    AND?: FacultyWhereInput | FacultyWhereInput[]
    OR?: FacultyWhereInput[]
    NOT?: FacultyWhereInput | FacultyWhereInput[]
    faculty_name?: StringNullableFilter<"Faculty"> | string | null
    Pulpit?: PulpitListRelationFilter
  }, "faculty">

  export type FacultyOrderByWithAggregationInput = {
    faculty?: SortOrder
    faculty_name?: SortOrderInput | SortOrder
    _count?: FacultyCountOrderByAggregateInput
    _max?: FacultyMaxOrderByAggregateInput
    _min?: FacultyMinOrderByAggregateInput
  }

  export type FacultyScalarWhereWithAggregatesInput = {
    AND?: FacultyScalarWhereWithAggregatesInput | FacultyScalarWhereWithAggregatesInput[]
    OR?: FacultyScalarWhereWithAggregatesInput[]
    NOT?: FacultyScalarWhereWithAggregatesInput | FacultyScalarWhereWithAggregatesInput[]
    faculty?: StringWithAggregatesFilter<"Faculty"> | string
    faculty_name?: StringNullableWithAggregatesFilter<"Faculty"> | string | null
  }

  export type PulpitWhereInput = {
    AND?: PulpitWhereInput | PulpitWhereInput[]
    OR?: PulpitWhereInput[]
    NOT?: PulpitWhereInput | PulpitWhereInput[]
    pulpit?: StringFilter<"Pulpit"> | string
    pulpit_name?: StringNullableFilter<"Pulpit"> | string | null
    faculty?: StringFilter<"Pulpit"> | string
    Faculty?: XOR<FacultyRelationFilter, FacultyWhereInput>
    Subject?: SubjectListRelationFilter
    Teacher?: TeacherListRelationFilter
  }

  export type PulpitOrderByWithRelationInput = {
    pulpit?: SortOrder
    pulpit_name?: SortOrderInput | SortOrder
    faculty?: SortOrder
    Faculty?: FacultyOrderByWithRelationInput
    Subject?: SubjectOrderByRelationAggregateInput
    Teacher?: TeacherOrderByRelationAggregateInput
  }

  export type PulpitWhereUniqueInput = Prisma.AtLeast<{
    pulpit?: string
    AND?: PulpitWhereInput | PulpitWhereInput[]
    OR?: PulpitWhereInput[]
    NOT?: PulpitWhereInput | PulpitWhereInput[]
    pulpit_name?: StringNullableFilter<"Pulpit"> | string | null
    faculty?: StringFilter<"Pulpit"> | string
    Faculty?: XOR<FacultyRelationFilter, FacultyWhereInput>
    Subject?: SubjectListRelationFilter
    Teacher?: TeacherListRelationFilter
  }, "pulpit">

  export type PulpitOrderByWithAggregationInput = {
    pulpit?: SortOrder
    pulpit_name?: SortOrderInput | SortOrder
    faculty?: SortOrder
    _count?: PulpitCountOrderByAggregateInput
    _max?: PulpitMaxOrderByAggregateInput
    _min?: PulpitMinOrderByAggregateInput
  }

  export type PulpitScalarWhereWithAggregatesInput = {
    AND?: PulpitScalarWhereWithAggregatesInput | PulpitScalarWhereWithAggregatesInput[]
    OR?: PulpitScalarWhereWithAggregatesInput[]
    NOT?: PulpitScalarWhereWithAggregatesInput | PulpitScalarWhereWithAggregatesInput[]
    pulpit?: StringWithAggregatesFilter<"Pulpit"> | string
    pulpit_name?: StringNullableWithAggregatesFilter<"Pulpit"> | string | null
    faculty?: StringWithAggregatesFilter<"Pulpit"> | string
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    subject?: StringFilter<"Subject"> | string
    subject_name?: StringFilter<"Subject"> | string
    pulpit?: StringFilter<"Subject"> | string
    Pulpit?: XOR<PulpitRelationFilter, PulpitWhereInput>
  }

  export type SubjectOrderByWithRelationInput = {
    subject?: SortOrder
    subject_name?: SortOrder
    pulpit?: SortOrder
    Pulpit?: PulpitOrderByWithRelationInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    subject?: string
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    subject_name?: StringFilter<"Subject"> | string
    pulpit?: StringFilter<"Subject"> | string
    Pulpit?: XOR<PulpitRelationFilter, PulpitWhereInput>
  }, "subject">

  export type SubjectOrderByWithAggregationInput = {
    subject?: SortOrder
    subject_name?: SortOrder
    pulpit?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    subject?: StringWithAggregatesFilter<"Subject"> | string
    subject_name?: StringWithAggregatesFilter<"Subject"> | string
    pulpit?: StringWithAggregatesFilter<"Subject"> | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    teacher?: StringFilter<"Teacher"> | string
    teacher_name?: StringNullableFilter<"Teacher"> | string | null
    pulpit?: StringFilter<"Teacher"> | string
    Pulpit?: XOR<PulpitRelationFilter, PulpitWhereInput>
  }

  export type TeacherOrderByWithRelationInput = {
    teacher?: SortOrder
    teacher_name?: SortOrderInput | SortOrder
    pulpit?: SortOrder
    Pulpit?: PulpitOrderByWithRelationInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    teacher?: string
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    teacher_name?: StringNullableFilter<"Teacher"> | string | null
    pulpit?: StringFilter<"Teacher"> | string
    Pulpit?: XOR<PulpitRelationFilter, PulpitWhereInput>
  }, "teacher">

  export type TeacherOrderByWithAggregationInput = {
    teacher?: SortOrder
    teacher_name?: SortOrderInput | SortOrder
    pulpit?: SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    teacher?: StringWithAggregatesFilter<"Teacher"> | string
    teacher_name?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    pulpit?: StringWithAggregatesFilter<"Teacher"> | string
  }

  export type AuditoriumTypeWhereInput = {
    AND?: AuditoriumTypeWhereInput | AuditoriumTypeWhereInput[]
    OR?: AuditoriumTypeWhereInput[]
    NOT?: AuditoriumTypeWhereInput | AuditoriumTypeWhereInput[]
    auditorium_type?: StringFilter<"AuditoriumType"> | string
    auditorium_typename?: StringFilter<"AuditoriumType"> | string
    Auditorium?: AuditoriumListRelationFilter
  }

  export type AuditoriumTypeOrderByWithRelationInput = {
    auditorium_type?: SortOrder
    auditorium_typename?: SortOrder
    Auditorium?: AuditoriumOrderByRelationAggregateInput
  }

  export type AuditoriumTypeWhereUniqueInput = Prisma.AtLeast<{
    auditorium_type?: string
    AND?: AuditoriumTypeWhereInput | AuditoriumTypeWhereInput[]
    OR?: AuditoriumTypeWhereInput[]
    NOT?: AuditoriumTypeWhereInput | AuditoriumTypeWhereInput[]
    auditorium_typename?: StringFilter<"AuditoriumType"> | string
    Auditorium?: AuditoriumListRelationFilter
  }, "auditorium_type">

  export type AuditoriumTypeOrderByWithAggregationInput = {
    auditorium_type?: SortOrder
    auditorium_typename?: SortOrder
    _count?: AuditoriumTypeCountOrderByAggregateInput
    _max?: AuditoriumTypeMaxOrderByAggregateInput
    _min?: AuditoriumTypeMinOrderByAggregateInput
  }

  export type AuditoriumTypeScalarWhereWithAggregatesInput = {
    AND?: AuditoriumTypeScalarWhereWithAggregatesInput | AuditoriumTypeScalarWhereWithAggregatesInput[]
    OR?: AuditoriumTypeScalarWhereWithAggregatesInput[]
    NOT?: AuditoriumTypeScalarWhereWithAggregatesInput | AuditoriumTypeScalarWhereWithAggregatesInput[]
    auditorium_type?: StringWithAggregatesFilter<"AuditoriumType"> | string
    auditorium_typename?: StringWithAggregatesFilter<"AuditoriumType"> | string
  }

  export type AuditoriumWhereInput = {
    AND?: AuditoriumWhereInput | AuditoriumWhereInput[]
    OR?: AuditoriumWhereInput[]
    NOT?: AuditoriumWhereInput | AuditoriumWhereInput[]
    auditorium?: StringFilter<"Auditorium"> | string
    auditorium_name?: StringNullableFilter<"Auditorium"> | string | null
    auditorium_capacity?: IntNullableFilter<"Auditorium"> | number | null
    auditorium_type?: StringFilter<"Auditorium"> | string
    AuditoriumType?: XOR<AuditoriumTypeRelationFilter, AuditoriumTypeWhereInput>
  }

  export type AuditoriumOrderByWithRelationInput = {
    auditorium?: SortOrder
    auditorium_name?: SortOrderInput | SortOrder
    auditorium_capacity?: SortOrderInput | SortOrder
    auditorium_type?: SortOrder
    AuditoriumType?: AuditoriumTypeOrderByWithRelationInput
  }

  export type AuditoriumWhereUniqueInput = Prisma.AtLeast<{
    auditorium?: string
    AND?: AuditoriumWhereInput | AuditoriumWhereInput[]
    OR?: AuditoriumWhereInput[]
    NOT?: AuditoriumWhereInput | AuditoriumWhereInput[]
    auditorium_name?: StringNullableFilter<"Auditorium"> | string | null
    auditorium_capacity?: IntNullableFilter<"Auditorium"> | number | null
    auditorium_type?: StringFilter<"Auditorium"> | string
    AuditoriumType?: XOR<AuditoriumTypeRelationFilter, AuditoriumTypeWhereInput>
  }, "auditorium">

  export type AuditoriumOrderByWithAggregationInput = {
    auditorium?: SortOrder
    auditorium_name?: SortOrderInput | SortOrder
    auditorium_capacity?: SortOrderInput | SortOrder
    auditorium_type?: SortOrder
    _count?: AuditoriumCountOrderByAggregateInput
    _avg?: AuditoriumAvgOrderByAggregateInput
    _max?: AuditoriumMaxOrderByAggregateInput
    _min?: AuditoriumMinOrderByAggregateInput
    _sum?: AuditoriumSumOrderByAggregateInput
  }

  export type AuditoriumScalarWhereWithAggregatesInput = {
    AND?: AuditoriumScalarWhereWithAggregatesInput | AuditoriumScalarWhereWithAggregatesInput[]
    OR?: AuditoriumScalarWhereWithAggregatesInput[]
    NOT?: AuditoriumScalarWhereWithAggregatesInput | AuditoriumScalarWhereWithAggregatesInput[]
    auditorium?: StringWithAggregatesFilter<"Auditorium"> | string
    auditorium_name?: StringNullableWithAggregatesFilter<"Auditorium"> | string | null
    auditorium_capacity?: IntNullableWithAggregatesFilter<"Auditorium"> | number | null
    auditorium_type?: StringWithAggregatesFilter<"Auditorium"> | string
  }

  export type FacultyCreateInput = {
    faculty: string
    faculty_name?: string | null
    Pulpit?: PulpitCreateNestedManyWithoutFacultyInput
  }

  export type FacultyUncheckedCreateInput = {
    faculty: string
    faculty_name?: string | null
    Pulpit?: PulpitUncheckedCreateNestedManyWithoutFacultyInput
  }

  export type FacultyUpdateInput = {
    faculty?: StringFieldUpdateOperationsInput | string
    faculty_name?: NullableStringFieldUpdateOperationsInput | string | null
    Pulpit?: PulpitUpdateManyWithoutFacultyNestedInput
  }

  export type FacultyUncheckedUpdateInput = {
    faculty?: StringFieldUpdateOperationsInput | string
    faculty_name?: NullableStringFieldUpdateOperationsInput | string | null
    Pulpit?: PulpitUncheckedUpdateManyWithoutFacultyNestedInput
  }

  export type FacultyCreateManyInput = {
    faculty: string
    faculty_name?: string | null
  }

  export type FacultyUpdateManyMutationInput = {
    faculty?: StringFieldUpdateOperationsInput | string
    faculty_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FacultyUncheckedUpdateManyInput = {
    faculty?: StringFieldUpdateOperationsInput | string
    faculty_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PulpitCreateInput = {
    pulpit: string
    pulpit_name?: string | null
    Faculty: FacultyCreateNestedOneWithoutPulpitInput
    Subject?: SubjectCreateNestedManyWithoutPulpitInput
    Teacher?: TeacherCreateNestedManyWithoutPulpitInput
  }

  export type PulpitUncheckedCreateInput = {
    pulpit: string
    pulpit_name?: string | null
    faculty: string
    Subject?: SubjectUncheckedCreateNestedManyWithoutPulpitInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutPulpitInput
  }

  export type PulpitUpdateInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
    Faculty?: FacultyUpdateOneRequiredWithoutPulpitNestedInput
    Subject?: SubjectUpdateManyWithoutPulpitNestedInput
    Teacher?: TeacherUpdateManyWithoutPulpitNestedInput
  }

  export type PulpitUncheckedUpdateInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    Subject?: SubjectUncheckedUpdateManyWithoutPulpitNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutPulpitNestedInput
  }

  export type PulpitCreateManyInput = {
    pulpit: string
    pulpit_name?: string | null
    faculty: string
  }

  export type PulpitUpdateManyMutationInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PulpitUncheckedUpdateManyInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectCreateInput = {
    subject: string
    subject_name: string
    Pulpit: PulpitCreateNestedOneWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    subject: string
    subject_name: string
    pulpit: string
  }

  export type SubjectUpdateInput = {
    subject?: StringFieldUpdateOperationsInput | string
    subject_name?: StringFieldUpdateOperationsInput | string
    Pulpit?: PulpitUpdateOneRequiredWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    subject?: StringFieldUpdateOperationsInput | string
    subject_name?: StringFieldUpdateOperationsInput | string
    pulpit?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectCreateManyInput = {
    subject: string
    subject_name: string
    pulpit: string
  }

  export type SubjectUpdateManyMutationInput = {
    subject?: StringFieldUpdateOperationsInput | string
    subject_name?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    subject?: StringFieldUpdateOperationsInput | string
    subject_name?: StringFieldUpdateOperationsInput | string
    pulpit?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCreateInput = {
    teacher: string
    teacher_name?: string | null
    Pulpit: PulpitCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    teacher: string
    teacher_name?: string | null
    pulpit: string
  }

  export type TeacherUpdateInput = {
    teacher?: StringFieldUpdateOperationsInput | string
    teacher_name?: NullableStringFieldUpdateOperationsInput | string | null
    Pulpit?: PulpitUpdateOneRequiredWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    teacher?: StringFieldUpdateOperationsInput | string
    teacher_name?: NullableStringFieldUpdateOperationsInput | string | null
    pulpit?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCreateManyInput = {
    teacher: string
    teacher_name?: string | null
    pulpit: string
  }

  export type TeacherUpdateManyMutationInput = {
    teacher?: StringFieldUpdateOperationsInput | string
    teacher_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateManyInput = {
    teacher?: StringFieldUpdateOperationsInput | string
    teacher_name?: NullableStringFieldUpdateOperationsInput | string | null
    pulpit?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriumTypeCreateInput = {
    auditorium_type: string
    auditorium_typename: string
    Auditorium?: AuditoriumCreateNestedManyWithoutAuditoriumTypeInput
  }

  export type AuditoriumTypeUncheckedCreateInput = {
    auditorium_type: string
    auditorium_typename: string
    Auditorium?: AuditoriumUncheckedCreateNestedManyWithoutAuditoriumTypeInput
  }

  export type AuditoriumTypeUpdateInput = {
    auditorium_type?: StringFieldUpdateOperationsInput | string
    auditorium_typename?: StringFieldUpdateOperationsInput | string
    Auditorium?: AuditoriumUpdateManyWithoutAuditoriumTypeNestedInput
  }

  export type AuditoriumTypeUncheckedUpdateInput = {
    auditorium_type?: StringFieldUpdateOperationsInput | string
    auditorium_typename?: StringFieldUpdateOperationsInput | string
    Auditorium?: AuditoriumUncheckedUpdateManyWithoutAuditoriumTypeNestedInput
  }

  export type AuditoriumTypeCreateManyInput = {
    auditorium_type: string
    auditorium_typename: string
  }

  export type AuditoriumTypeUpdateManyMutationInput = {
    auditorium_type?: StringFieldUpdateOperationsInput | string
    auditorium_typename?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriumTypeUncheckedUpdateManyInput = {
    auditorium_type?: StringFieldUpdateOperationsInput | string
    auditorium_typename?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriumCreateInput = {
    auditorium: string
    auditorium_name?: string | null
    auditorium_capacity?: number | null
    AuditoriumType: AuditoriumTypeCreateNestedOneWithoutAuditoriumInput
  }

  export type AuditoriumUncheckedCreateInput = {
    auditorium: string
    auditorium_name?: string | null
    auditorium_capacity?: number | null
    auditorium_type: string
  }

  export type AuditoriumUpdateInput = {
    auditorium?: StringFieldUpdateOperationsInput | string
    auditorium_name?: NullableStringFieldUpdateOperationsInput | string | null
    auditorium_capacity?: NullableIntFieldUpdateOperationsInput | number | null
    AuditoriumType?: AuditoriumTypeUpdateOneRequiredWithoutAuditoriumNestedInput
  }

  export type AuditoriumUncheckedUpdateInput = {
    auditorium?: StringFieldUpdateOperationsInput | string
    auditorium_name?: NullableStringFieldUpdateOperationsInput | string | null
    auditorium_capacity?: NullableIntFieldUpdateOperationsInput | number | null
    auditorium_type?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriumCreateManyInput = {
    auditorium: string
    auditorium_name?: string | null
    auditorium_capacity?: number | null
    auditorium_type: string
  }

  export type AuditoriumUpdateManyMutationInput = {
    auditorium?: StringFieldUpdateOperationsInput | string
    auditorium_name?: NullableStringFieldUpdateOperationsInput | string | null
    auditorium_capacity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AuditoriumUncheckedUpdateManyInput = {
    auditorium?: StringFieldUpdateOperationsInput | string
    auditorium_name?: NullableStringFieldUpdateOperationsInput | string | null
    auditorium_capacity?: NullableIntFieldUpdateOperationsInput | number | null
    auditorium_type?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PulpitListRelationFilter = {
    every?: PulpitWhereInput
    some?: PulpitWhereInput
    none?: PulpitWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PulpitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacultyCountOrderByAggregateInput = {
    faculty?: SortOrder
    faculty_name?: SortOrder
  }

  export type FacultyMaxOrderByAggregateInput = {
    faculty?: SortOrder
    faculty_name?: SortOrder
  }

  export type FacultyMinOrderByAggregateInput = {
    faculty?: SortOrder
    faculty_name?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FacultyRelationFilter = {
    is?: FacultyWhereInput
    isNot?: FacultyWhereInput
  }

  export type SubjectListRelationFilter = {
    every?: SubjectWhereInput
    some?: SubjectWhereInput
    none?: SubjectWhereInput
  }

  export type TeacherListRelationFilter = {
    every?: TeacherWhereInput
    some?: TeacherWhereInput
    none?: TeacherWhereInput
  }

  export type SubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PulpitCountOrderByAggregateInput = {
    pulpit?: SortOrder
    pulpit_name?: SortOrder
    faculty?: SortOrder
  }

  export type PulpitMaxOrderByAggregateInput = {
    pulpit?: SortOrder
    pulpit_name?: SortOrder
    faculty?: SortOrder
  }

  export type PulpitMinOrderByAggregateInput = {
    pulpit?: SortOrder
    pulpit_name?: SortOrder
    faculty?: SortOrder
  }

  export type PulpitRelationFilter = {
    is?: PulpitWhereInput
    isNot?: PulpitWhereInput
  }

  export type SubjectCountOrderByAggregateInput = {
    subject?: SortOrder
    subject_name?: SortOrder
    pulpit?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    subject?: SortOrder
    subject_name?: SortOrder
    pulpit?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    subject?: SortOrder
    subject_name?: SortOrder
    pulpit?: SortOrder
  }

  export type TeacherCountOrderByAggregateInput = {
    teacher?: SortOrder
    teacher_name?: SortOrder
    pulpit?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    teacher?: SortOrder
    teacher_name?: SortOrder
    pulpit?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    teacher?: SortOrder
    teacher_name?: SortOrder
    pulpit?: SortOrder
  }

  export type AuditoriumListRelationFilter = {
    every?: AuditoriumWhereInput
    some?: AuditoriumWhereInput
    none?: AuditoriumWhereInput
  }

  export type AuditoriumOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditoriumTypeCountOrderByAggregateInput = {
    auditorium_type?: SortOrder
    auditorium_typename?: SortOrder
  }

  export type AuditoriumTypeMaxOrderByAggregateInput = {
    auditorium_type?: SortOrder
    auditorium_typename?: SortOrder
  }

  export type AuditoriumTypeMinOrderByAggregateInput = {
    auditorium_type?: SortOrder
    auditorium_typename?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AuditoriumTypeRelationFilter = {
    is?: AuditoriumTypeWhereInput
    isNot?: AuditoriumTypeWhereInput
  }

  export type AuditoriumCountOrderByAggregateInput = {
    auditorium?: SortOrder
    auditorium_name?: SortOrder
    auditorium_capacity?: SortOrder
    auditorium_type?: SortOrder
  }

  export type AuditoriumAvgOrderByAggregateInput = {
    auditorium_capacity?: SortOrder
  }

  export type AuditoriumMaxOrderByAggregateInput = {
    auditorium?: SortOrder
    auditorium_name?: SortOrder
    auditorium_capacity?: SortOrder
    auditorium_type?: SortOrder
  }

  export type AuditoriumMinOrderByAggregateInput = {
    auditorium?: SortOrder
    auditorium_name?: SortOrder
    auditorium_capacity?: SortOrder
    auditorium_type?: SortOrder
  }

  export type AuditoriumSumOrderByAggregateInput = {
    auditorium_capacity?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type PulpitCreateNestedManyWithoutFacultyInput = {
    create?: XOR<PulpitCreateWithoutFacultyInput, PulpitUncheckedCreateWithoutFacultyInput> | PulpitCreateWithoutFacultyInput[] | PulpitUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: PulpitCreateOrConnectWithoutFacultyInput | PulpitCreateOrConnectWithoutFacultyInput[]
    createMany?: PulpitCreateManyFacultyInputEnvelope
    connect?: PulpitWhereUniqueInput | PulpitWhereUniqueInput[]
  }

  export type PulpitUncheckedCreateNestedManyWithoutFacultyInput = {
    create?: XOR<PulpitCreateWithoutFacultyInput, PulpitUncheckedCreateWithoutFacultyInput> | PulpitCreateWithoutFacultyInput[] | PulpitUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: PulpitCreateOrConnectWithoutFacultyInput | PulpitCreateOrConnectWithoutFacultyInput[]
    createMany?: PulpitCreateManyFacultyInputEnvelope
    connect?: PulpitWhereUniqueInput | PulpitWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PulpitUpdateManyWithoutFacultyNestedInput = {
    create?: XOR<PulpitCreateWithoutFacultyInput, PulpitUncheckedCreateWithoutFacultyInput> | PulpitCreateWithoutFacultyInput[] | PulpitUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: PulpitCreateOrConnectWithoutFacultyInput | PulpitCreateOrConnectWithoutFacultyInput[]
    upsert?: PulpitUpsertWithWhereUniqueWithoutFacultyInput | PulpitUpsertWithWhereUniqueWithoutFacultyInput[]
    createMany?: PulpitCreateManyFacultyInputEnvelope
    set?: PulpitWhereUniqueInput | PulpitWhereUniqueInput[]
    disconnect?: PulpitWhereUniqueInput | PulpitWhereUniqueInput[]
    delete?: PulpitWhereUniqueInput | PulpitWhereUniqueInput[]
    connect?: PulpitWhereUniqueInput | PulpitWhereUniqueInput[]
    update?: PulpitUpdateWithWhereUniqueWithoutFacultyInput | PulpitUpdateWithWhereUniqueWithoutFacultyInput[]
    updateMany?: PulpitUpdateManyWithWhereWithoutFacultyInput | PulpitUpdateManyWithWhereWithoutFacultyInput[]
    deleteMany?: PulpitScalarWhereInput | PulpitScalarWhereInput[]
  }

  export type PulpitUncheckedUpdateManyWithoutFacultyNestedInput = {
    create?: XOR<PulpitCreateWithoutFacultyInput, PulpitUncheckedCreateWithoutFacultyInput> | PulpitCreateWithoutFacultyInput[] | PulpitUncheckedCreateWithoutFacultyInput[]
    connectOrCreate?: PulpitCreateOrConnectWithoutFacultyInput | PulpitCreateOrConnectWithoutFacultyInput[]
    upsert?: PulpitUpsertWithWhereUniqueWithoutFacultyInput | PulpitUpsertWithWhereUniqueWithoutFacultyInput[]
    createMany?: PulpitCreateManyFacultyInputEnvelope
    set?: PulpitWhereUniqueInput | PulpitWhereUniqueInput[]
    disconnect?: PulpitWhereUniqueInput | PulpitWhereUniqueInput[]
    delete?: PulpitWhereUniqueInput | PulpitWhereUniqueInput[]
    connect?: PulpitWhereUniqueInput | PulpitWhereUniqueInput[]
    update?: PulpitUpdateWithWhereUniqueWithoutFacultyInput | PulpitUpdateWithWhereUniqueWithoutFacultyInput[]
    updateMany?: PulpitUpdateManyWithWhereWithoutFacultyInput | PulpitUpdateManyWithWhereWithoutFacultyInput[]
    deleteMany?: PulpitScalarWhereInput | PulpitScalarWhereInput[]
  }

  export type FacultyCreateNestedOneWithoutPulpitInput = {
    create?: XOR<FacultyCreateWithoutPulpitInput, FacultyUncheckedCreateWithoutPulpitInput>
    connectOrCreate?: FacultyCreateOrConnectWithoutPulpitInput
    connect?: FacultyWhereUniqueInput
  }

  export type SubjectCreateNestedManyWithoutPulpitInput = {
    create?: XOR<SubjectCreateWithoutPulpitInput, SubjectUncheckedCreateWithoutPulpitInput> | SubjectCreateWithoutPulpitInput[] | SubjectUncheckedCreateWithoutPulpitInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutPulpitInput | SubjectCreateOrConnectWithoutPulpitInput[]
    createMany?: SubjectCreateManyPulpitInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type TeacherCreateNestedManyWithoutPulpitInput = {
    create?: XOR<TeacherCreateWithoutPulpitInput, TeacherUncheckedCreateWithoutPulpitInput> | TeacherCreateWithoutPulpitInput[] | TeacherUncheckedCreateWithoutPulpitInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutPulpitInput | TeacherCreateOrConnectWithoutPulpitInput[]
    createMany?: TeacherCreateManyPulpitInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutPulpitInput = {
    create?: XOR<SubjectCreateWithoutPulpitInput, SubjectUncheckedCreateWithoutPulpitInput> | SubjectCreateWithoutPulpitInput[] | SubjectUncheckedCreateWithoutPulpitInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutPulpitInput | SubjectCreateOrConnectWithoutPulpitInput[]
    createMany?: SubjectCreateManyPulpitInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedManyWithoutPulpitInput = {
    create?: XOR<TeacherCreateWithoutPulpitInput, TeacherUncheckedCreateWithoutPulpitInput> | TeacherCreateWithoutPulpitInput[] | TeacherUncheckedCreateWithoutPulpitInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutPulpitInput | TeacherCreateOrConnectWithoutPulpitInput[]
    createMany?: TeacherCreateManyPulpitInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type FacultyUpdateOneRequiredWithoutPulpitNestedInput = {
    create?: XOR<FacultyCreateWithoutPulpitInput, FacultyUncheckedCreateWithoutPulpitInput>
    connectOrCreate?: FacultyCreateOrConnectWithoutPulpitInput
    upsert?: FacultyUpsertWithoutPulpitInput
    connect?: FacultyWhereUniqueInput
    update?: XOR<XOR<FacultyUpdateToOneWithWhereWithoutPulpitInput, FacultyUpdateWithoutPulpitInput>, FacultyUncheckedUpdateWithoutPulpitInput>
  }

  export type SubjectUpdateManyWithoutPulpitNestedInput = {
    create?: XOR<SubjectCreateWithoutPulpitInput, SubjectUncheckedCreateWithoutPulpitInput> | SubjectCreateWithoutPulpitInput[] | SubjectUncheckedCreateWithoutPulpitInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutPulpitInput | SubjectCreateOrConnectWithoutPulpitInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutPulpitInput | SubjectUpsertWithWhereUniqueWithoutPulpitInput[]
    createMany?: SubjectCreateManyPulpitInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutPulpitInput | SubjectUpdateWithWhereUniqueWithoutPulpitInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutPulpitInput | SubjectUpdateManyWithWhereWithoutPulpitInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type TeacherUpdateManyWithoutPulpitNestedInput = {
    create?: XOR<TeacherCreateWithoutPulpitInput, TeacherUncheckedCreateWithoutPulpitInput> | TeacherCreateWithoutPulpitInput[] | TeacherUncheckedCreateWithoutPulpitInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutPulpitInput | TeacherCreateOrConnectWithoutPulpitInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutPulpitInput | TeacherUpsertWithWhereUniqueWithoutPulpitInput[]
    createMany?: TeacherCreateManyPulpitInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutPulpitInput | TeacherUpdateWithWhereUniqueWithoutPulpitInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutPulpitInput | TeacherUpdateManyWithWhereWithoutPulpitInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutPulpitNestedInput = {
    create?: XOR<SubjectCreateWithoutPulpitInput, SubjectUncheckedCreateWithoutPulpitInput> | SubjectCreateWithoutPulpitInput[] | SubjectUncheckedCreateWithoutPulpitInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutPulpitInput | SubjectCreateOrConnectWithoutPulpitInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutPulpitInput | SubjectUpsertWithWhereUniqueWithoutPulpitInput[]
    createMany?: SubjectCreateManyPulpitInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutPulpitInput | SubjectUpdateWithWhereUniqueWithoutPulpitInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutPulpitInput | SubjectUpdateManyWithWhereWithoutPulpitInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateManyWithoutPulpitNestedInput = {
    create?: XOR<TeacherCreateWithoutPulpitInput, TeacherUncheckedCreateWithoutPulpitInput> | TeacherCreateWithoutPulpitInput[] | TeacherUncheckedCreateWithoutPulpitInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutPulpitInput | TeacherCreateOrConnectWithoutPulpitInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutPulpitInput | TeacherUpsertWithWhereUniqueWithoutPulpitInput[]
    createMany?: TeacherCreateManyPulpitInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutPulpitInput | TeacherUpdateWithWhereUniqueWithoutPulpitInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutPulpitInput | TeacherUpdateManyWithWhereWithoutPulpitInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type PulpitCreateNestedOneWithoutSubjectInput = {
    create?: XOR<PulpitCreateWithoutSubjectInput, PulpitUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: PulpitCreateOrConnectWithoutSubjectInput
    connect?: PulpitWhereUniqueInput
  }

  export type PulpitUpdateOneRequiredWithoutSubjectNestedInput = {
    create?: XOR<PulpitCreateWithoutSubjectInput, PulpitUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: PulpitCreateOrConnectWithoutSubjectInput
    upsert?: PulpitUpsertWithoutSubjectInput
    connect?: PulpitWhereUniqueInput
    update?: XOR<XOR<PulpitUpdateToOneWithWhereWithoutSubjectInput, PulpitUpdateWithoutSubjectInput>, PulpitUncheckedUpdateWithoutSubjectInput>
  }

  export type PulpitCreateNestedOneWithoutTeacherInput = {
    create?: XOR<PulpitCreateWithoutTeacherInput, PulpitUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: PulpitCreateOrConnectWithoutTeacherInput
    connect?: PulpitWhereUniqueInput
  }

  export type PulpitUpdateOneRequiredWithoutTeacherNestedInput = {
    create?: XOR<PulpitCreateWithoutTeacherInput, PulpitUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: PulpitCreateOrConnectWithoutTeacherInput
    upsert?: PulpitUpsertWithoutTeacherInput
    connect?: PulpitWhereUniqueInput
    update?: XOR<XOR<PulpitUpdateToOneWithWhereWithoutTeacherInput, PulpitUpdateWithoutTeacherInput>, PulpitUncheckedUpdateWithoutTeacherInput>
  }

  export type AuditoriumCreateNestedManyWithoutAuditoriumTypeInput = {
    create?: XOR<AuditoriumCreateWithoutAuditoriumTypeInput, AuditoriumUncheckedCreateWithoutAuditoriumTypeInput> | AuditoriumCreateWithoutAuditoriumTypeInput[] | AuditoriumUncheckedCreateWithoutAuditoriumTypeInput[]
    connectOrCreate?: AuditoriumCreateOrConnectWithoutAuditoriumTypeInput | AuditoriumCreateOrConnectWithoutAuditoriumTypeInput[]
    createMany?: AuditoriumCreateManyAuditoriumTypeInputEnvelope
    connect?: AuditoriumWhereUniqueInput | AuditoriumWhereUniqueInput[]
  }

  export type AuditoriumUncheckedCreateNestedManyWithoutAuditoriumTypeInput = {
    create?: XOR<AuditoriumCreateWithoutAuditoriumTypeInput, AuditoriumUncheckedCreateWithoutAuditoriumTypeInput> | AuditoriumCreateWithoutAuditoriumTypeInput[] | AuditoriumUncheckedCreateWithoutAuditoriumTypeInput[]
    connectOrCreate?: AuditoriumCreateOrConnectWithoutAuditoriumTypeInput | AuditoriumCreateOrConnectWithoutAuditoriumTypeInput[]
    createMany?: AuditoriumCreateManyAuditoriumTypeInputEnvelope
    connect?: AuditoriumWhereUniqueInput | AuditoriumWhereUniqueInput[]
  }

  export type AuditoriumUpdateManyWithoutAuditoriumTypeNestedInput = {
    create?: XOR<AuditoriumCreateWithoutAuditoriumTypeInput, AuditoriumUncheckedCreateWithoutAuditoriumTypeInput> | AuditoriumCreateWithoutAuditoriumTypeInput[] | AuditoriumUncheckedCreateWithoutAuditoriumTypeInput[]
    connectOrCreate?: AuditoriumCreateOrConnectWithoutAuditoriumTypeInput | AuditoriumCreateOrConnectWithoutAuditoriumTypeInput[]
    upsert?: AuditoriumUpsertWithWhereUniqueWithoutAuditoriumTypeInput | AuditoriumUpsertWithWhereUniqueWithoutAuditoriumTypeInput[]
    createMany?: AuditoriumCreateManyAuditoriumTypeInputEnvelope
    set?: AuditoriumWhereUniqueInput | AuditoriumWhereUniqueInput[]
    disconnect?: AuditoriumWhereUniqueInput | AuditoriumWhereUniqueInput[]
    delete?: AuditoriumWhereUniqueInput | AuditoriumWhereUniqueInput[]
    connect?: AuditoriumWhereUniqueInput | AuditoriumWhereUniqueInput[]
    update?: AuditoriumUpdateWithWhereUniqueWithoutAuditoriumTypeInput | AuditoriumUpdateWithWhereUniqueWithoutAuditoriumTypeInput[]
    updateMany?: AuditoriumUpdateManyWithWhereWithoutAuditoriumTypeInput | AuditoriumUpdateManyWithWhereWithoutAuditoriumTypeInput[]
    deleteMany?: AuditoriumScalarWhereInput | AuditoriumScalarWhereInput[]
  }

  export type AuditoriumUncheckedUpdateManyWithoutAuditoriumTypeNestedInput = {
    create?: XOR<AuditoriumCreateWithoutAuditoriumTypeInput, AuditoriumUncheckedCreateWithoutAuditoriumTypeInput> | AuditoriumCreateWithoutAuditoriumTypeInput[] | AuditoriumUncheckedCreateWithoutAuditoriumTypeInput[]
    connectOrCreate?: AuditoriumCreateOrConnectWithoutAuditoriumTypeInput | AuditoriumCreateOrConnectWithoutAuditoriumTypeInput[]
    upsert?: AuditoriumUpsertWithWhereUniqueWithoutAuditoriumTypeInput | AuditoriumUpsertWithWhereUniqueWithoutAuditoriumTypeInput[]
    createMany?: AuditoriumCreateManyAuditoriumTypeInputEnvelope
    set?: AuditoriumWhereUniqueInput | AuditoriumWhereUniqueInput[]
    disconnect?: AuditoriumWhereUniqueInput | AuditoriumWhereUniqueInput[]
    delete?: AuditoriumWhereUniqueInput | AuditoriumWhereUniqueInput[]
    connect?: AuditoriumWhereUniqueInput | AuditoriumWhereUniqueInput[]
    update?: AuditoriumUpdateWithWhereUniqueWithoutAuditoriumTypeInput | AuditoriumUpdateWithWhereUniqueWithoutAuditoriumTypeInput[]
    updateMany?: AuditoriumUpdateManyWithWhereWithoutAuditoriumTypeInput | AuditoriumUpdateManyWithWhereWithoutAuditoriumTypeInput[]
    deleteMany?: AuditoriumScalarWhereInput | AuditoriumScalarWhereInput[]
  }

  export type AuditoriumTypeCreateNestedOneWithoutAuditoriumInput = {
    create?: XOR<AuditoriumTypeCreateWithoutAuditoriumInput, AuditoriumTypeUncheckedCreateWithoutAuditoriumInput>
    connectOrCreate?: AuditoriumTypeCreateOrConnectWithoutAuditoriumInput
    connect?: AuditoriumTypeWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AuditoriumTypeUpdateOneRequiredWithoutAuditoriumNestedInput = {
    create?: XOR<AuditoriumTypeCreateWithoutAuditoriumInput, AuditoriumTypeUncheckedCreateWithoutAuditoriumInput>
    connectOrCreate?: AuditoriumTypeCreateOrConnectWithoutAuditoriumInput
    upsert?: AuditoriumTypeUpsertWithoutAuditoriumInput
    connect?: AuditoriumTypeWhereUniqueInput
    update?: XOR<XOR<AuditoriumTypeUpdateToOneWithWhereWithoutAuditoriumInput, AuditoriumTypeUpdateWithoutAuditoriumInput>, AuditoriumTypeUncheckedUpdateWithoutAuditoriumInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type PulpitCreateWithoutFacultyInput = {
    pulpit: string
    pulpit_name?: string | null
    Subject?: SubjectCreateNestedManyWithoutPulpitInput
    Teacher?: TeacherCreateNestedManyWithoutPulpitInput
  }

  export type PulpitUncheckedCreateWithoutFacultyInput = {
    pulpit: string
    pulpit_name?: string | null
    Subject?: SubjectUncheckedCreateNestedManyWithoutPulpitInput
    Teacher?: TeacherUncheckedCreateNestedManyWithoutPulpitInput
  }

  export type PulpitCreateOrConnectWithoutFacultyInput = {
    where: PulpitWhereUniqueInput
    create: XOR<PulpitCreateWithoutFacultyInput, PulpitUncheckedCreateWithoutFacultyInput>
  }

  export type PulpitCreateManyFacultyInputEnvelope = {
    data: PulpitCreateManyFacultyInput | PulpitCreateManyFacultyInput[]
  }

  export type PulpitUpsertWithWhereUniqueWithoutFacultyInput = {
    where: PulpitWhereUniqueInput
    update: XOR<PulpitUpdateWithoutFacultyInput, PulpitUncheckedUpdateWithoutFacultyInput>
    create: XOR<PulpitCreateWithoutFacultyInput, PulpitUncheckedCreateWithoutFacultyInput>
  }

  export type PulpitUpdateWithWhereUniqueWithoutFacultyInput = {
    where: PulpitWhereUniqueInput
    data: XOR<PulpitUpdateWithoutFacultyInput, PulpitUncheckedUpdateWithoutFacultyInput>
  }

  export type PulpitUpdateManyWithWhereWithoutFacultyInput = {
    where: PulpitScalarWhereInput
    data: XOR<PulpitUpdateManyMutationInput, PulpitUncheckedUpdateManyWithoutFacultyInput>
  }

  export type PulpitScalarWhereInput = {
    AND?: PulpitScalarWhereInput | PulpitScalarWhereInput[]
    OR?: PulpitScalarWhereInput[]
    NOT?: PulpitScalarWhereInput | PulpitScalarWhereInput[]
    pulpit?: StringFilter<"Pulpit"> | string
    pulpit_name?: StringNullableFilter<"Pulpit"> | string | null
    faculty?: StringFilter<"Pulpit"> | string
  }

  export type FacultyCreateWithoutPulpitInput = {
    faculty: string
    faculty_name?: string | null
  }

  export type FacultyUncheckedCreateWithoutPulpitInput = {
    faculty: string
    faculty_name?: string | null
  }

  export type FacultyCreateOrConnectWithoutPulpitInput = {
    where: FacultyWhereUniqueInput
    create: XOR<FacultyCreateWithoutPulpitInput, FacultyUncheckedCreateWithoutPulpitInput>
  }

  export type SubjectCreateWithoutPulpitInput = {
    subject: string
    subject_name: string
  }

  export type SubjectUncheckedCreateWithoutPulpitInput = {
    subject: string
    subject_name: string
  }

  export type SubjectCreateOrConnectWithoutPulpitInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutPulpitInput, SubjectUncheckedCreateWithoutPulpitInput>
  }

  export type SubjectCreateManyPulpitInputEnvelope = {
    data: SubjectCreateManyPulpitInput | SubjectCreateManyPulpitInput[]
  }

  export type TeacherCreateWithoutPulpitInput = {
    teacher: string
    teacher_name?: string | null
  }

  export type TeacherUncheckedCreateWithoutPulpitInput = {
    teacher: string
    teacher_name?: string | null
  }

  export type TeacherCreateOrConnectWithoutPulpitInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutPulpitInput, TeacherUncheckedCreateWithoutPulpitInput>
  }

  export type TeacherCreateManyPulpitInputEnvelope = {
    data: TeacherCreateManyPulpitInput | TeacherCreateManyPulpitInput[]
  }

  export type FacultyUpsertWithoutPulpitInput = {
    update: XOR<FacultyUpdateWithoutPulpitInput, FacultyUncheckedUpdateWithoutPulpitInput>
    create: XOR<FacultyCreateWithoutPulpitInput, FacultyUncheckedCreateWithoutPulpitInput>
    where?: FacultyWhereInput
  }

  export type FacultyUpdateToOneWithWhereWithoutPulpitInput = {
    where?: FacultyWhereInput
    data: XOR<FacultyUpdateWithoutPulpitInput, FacultyUncheckedUpdateWithoutPulpitInput>
  }

  export type FacultyUpdateWithoutPulpitInput = {
    faculty?: StringFieldUpdateOperationsInput | string
    faculty_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FacultyUncheckedUpdateWithoutPulpitInput = {
    faculty?: StringFieldUpdateOperationsInput | string
    faculty_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubjectUpsertWithWhereUniqueWithoutPulpitInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutPulpitInput, SubjectUncheckedUpdateWithoutPulpitInput>
    create: XOR<SubjectCreateWithoutPulpitInput, SubjectUncheckedCreateWithoutPulpitInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutPulpitInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutPulpitInput, SubjectUncheckedUpdateWithoutPulpitInput>
  }

  export type SubjectUpdateManyWithWhereWithoutPulpitInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutPulpitInput>
  }

  export type SubjectScalarWhereInput = {
    AND?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    OR?: SubjectScalarWhereInput[]
    NOT?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    subject?: StringFilter<"Subject"> | string
    subject_name?: StringFilter<"Subject"> | string
    pulpit?: StringFilter<"Subject"> | string
  }

  export type TeacherUpsertWithWhereUniqueWithoutPulpitInput = {
    where: TeacherWhereUniqueInput
    update: XOR<TeacherUpdateWithoutPulpitInput, TeacherUncheckedUpdateWithoutPulpitInput>
    create: XOR<TeacherCreateWithoutPulpitInput, TeacherUncheckedCreateWithoutPulpitInput>
  }

  export type TeacherUpdateWithWhereUniqueWithoutPulpitInput = {
    where: TeacherWhereUniqueInput
    data: XOR<TeacherUpdateWithoutPulpitInput, TeacherUncheckedUpdateWithoutPulpitInput>
  }

  export type TeacherUpdateManyWithWhereWithoutPulpitInput = {
    where: TeacherScalarWhereInput
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyWithoutPulpitInput>
  }

  export type TeacherScalarWhereInput = {
    AND?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    OR?: TeacherScalarWhereInput[]
    NOT?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    teacher?: StringFilter<"Teacher"> | string
    teacher_name?: StringNullableFilter<"Teacher"> | string | null
    pulpit?: StringFilter<"Teacher"> | string
  }

  export type PulpitCreateWithoutSubjectInput = {
    pulpit: string
    pulpit_name?: string | null
    Faculty: FacultyCreateNestedOneWithoutPulpitInput
    Teacher?: TeacherCreateNestedManyWithoutPulpitInput
  }

  export type PulpitUncheckedCreateWithoutSubjectInput = {
    pulpit: string
    pulpit_name?: string | null
    faculty: string
    Teacher?: TeacherUncheckedCreateNestedManyWithoutPulpitInput
  }

  export type PulpitCreateOrConnectWithoutSubjectInput = {
    where: PulpitWhereUniqueInput
    create: XOR<PulpitCreateWithoutSubjectInput, PulpitUncheckedCreateWithoutSubjectInput>
  }

  export type PulpitUpsertWithoutSubjectInput = {
    update: XOR<PulpitUpdateWithoutSubjectInput, PulpitUncheckedUpdateWithoutSubjectInput>
    create: XOR<PulpitCreateWithoutSubjectInput, PulpitUncheckedCreateWithoutSubjectInput>
    where?: PulpitWhereInput
  }

  export type PulpitUpdateToOneWithWhereWithoutSubjectInput = {
    where?: PulpitWhereInput
    data: XOR<PulpitUpdateWithoutSubjectInput, PulpitUncheckedUpdateWithoutSubjectInput>
  }

  export type PulpitUpdateWithoutSubjectInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
    Faculty?: FacultyUpdateOneRequiredWithoutPulpitNestedInput
    Teacher?: TeacherUpdateManyWithoutPulpitNestedInput
  }

  export type PulpitUncheckedUpdateWithoutSubjectInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    Teacher?: TeacherUncheckedUpdateManyWithoutPulpitNestedInput
  }

  export type PulpitCreateWithoutTeacherInput = {
    pulpit: string
    pulpit_name?: string | null
    Faculty: FacultyCreateNestedOneWithoutPulpitInput
    Subject?: SubjectCreateNestedManyWithoutPulpitInput
  }

  export type PulpitUncheckedCreateWithoutTeacherInput = {
    pulpit: string
    pulpit_name?: string | null
    faculty: string
    Subject?: SubjectUncheckedCreateNestedManyWithoutPulpitInput
  }

  export type PulpitCreateOrConnectWithoutTeacherInput = {
    where: PulpitWhereUniqueInput
    create: XOR<PulpitCreateWithoutTeacherInput, PulpitUncheckedCreateWithoutTeacherInput>
  }

  export type PulpitUpsertWithoutTeacherInput = {
    update: XOR<PulpitUpdateWithoutTeacherInput, PulpitUncheckedUpdateWithoutTeacherInput>
    create: XOR<PulpitCreateWithoutTeacherInput, PulpitUncheckedCreateWithoutTeacherInput>
    where?: PulpitWhereInput
  }

  export type PulpitUpdateToOneWithWhereWithoutTeacherInput = {
    where?: PulpitWhereInput
    data: XOR<PulpitUpdateWithoutTeacherInput, PulpitUncheckedUpdateWithoutTeacherInput>
  }

  export type PulpitUpdateWithoutTeacherInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
    Faculty?: FacultyUpdateOneRequiredWithoutPulpitNestedInput
    Subject?: SubjectUpdateManyWithoutPulpitNestedInput
  }

  export type PulpitUncheckedUpdateWithoutTeacherInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    Subject?: SubjectUncheckedUpdateManyWithoutPulpitNestedInput
  }

  export type AuditoriumCreateWithoutAuditoriumTypeInput = {
    auditorium: string
    auditorium_name?: string | null
    auditorium_capacity?: number | null
  }

  export type AuditoriumUncheckedCreateWithoutAuditoriumTypeInput = {
    auditorium: string
    auditorium_name?: string | null
    auditorium_capacity?: number | null
  }

  export type AuditoriumCreateOrConnectWithoutAuditoriumTypeInput = {
    where: AuditoriumWhereUniqueInput
    create: XOR<AuditoriumCreateWithoutAuditoriumTypeInput, AuditoriumUncheckedCreateWithoutAuditoriumTypeInput>
  }

  export type AuditoriumCreateManyAuditoriumTypeInputEnvelope = {
    data: AuditoriumCreateManyAuditoriumTypeInput | AuditoriumCreateManyAuditoriumTypeInput[]
  }

  export type AuditoriumUpsertWithWhereUniqueWithoutAuditoriumTypeInput = {
    where: AuditoriumWhereUniqueInput
    update: XOR<AuditoriumUpdateWithoutAuditoriumTypeInput, AuditoriumUncheckedUpdateWithoutAuditoriumTypeInput>
    create: XOR<AuditoriumCreateWithoutAuditoriumTypeInput, AuditoriumUncheckedCreateWithoutAuditoriumTypeInput>
  }

  export type AuditoriumUpdateWithWhereUniqueWithoutAuditoriumTypeInput = {
    where: AuditoriumWhereUniqueInput
    data: XOR<AuditoriumUpdateWithoutAuditoriumTypeInput, AuditoriumUncheckedUpdateWithoutAuditoriumTypeInput>
  }

  export type AuditoriumUpdateManyWithWhereWithoutAuditoriumTypeInput = {
    where: AuditoriumScalarWhereInput
    data: XOR<AuditoriumUpdateManyMutationInput, AuditoriumUncheckedUpdateManyWithoutAuditoriumTypeInput>
  }

  export type AuditoriumScalarWhereInput = {
    AND?: AuditoriumScalarWhereInput | AuditoriumScalarWhereInput[]
    OR?: AuditoriumScalarWhereInput[]
    NOT?: AuditoriumScalarWhereInput | AuditoriumScalarWhereInput[]
    auditorium?: StringFilter<"Auditorium"> | string
    auditorium_name?: StringNullableFilter<"Auditorium"> | string | null
    auditorium_capacity?: IntNullableFilter<"Auditorium"> | number | null
    auditorium_type?: StringFilter<"Auditorium"> | string
  }

  export type AuditoriumTypeCreateWithoutAuditoriumInput = {
    auditorium_type: string
    auditorium_typename: string
  }

  export type AuditoriumTypeUncheckedCreateWithoutAuditoriumInput = {
    auditorium_type: string
    auditorium_typename: string
  }

  export type AuditoriumTypeCreateOrConnectWithoutAuditoriumInput = {
    where: AuditoriumTypeWhereUniqueInput
    create: XOR<AuditoriumTypeCreateWithoutAuditoriumInput, AuditoriumTypeUncheckedCreateWithoutAuditoriumInput>
  }

  export type AuditoriumTypeUpsertWithoutAuditoriumInput = {
    update: XOR<AuditoriumTypeUpdateWithoutAuditoriumInput, AuditoriumTypeUncheckedUpdateWithoutAuditoriumInput>
    create: XOR<AuditoriumTypeCreateWithoutAuditoriumInput, AuditoriumTypeUncheckedCreateWithoutAuditoriumInput>
    where?: AuditoriumTypeWhereInput
  }

  export type AuditoriumTypeUpdateToOneWithWhereWithoutAuditoriumInput = {
    where?: AuditoriumTypeWhereInput
    data: XOR<AuditoriumTypeUpdateWithoutAuditoriumInput, AuditoriumTypeUncheckedUpdateWithoutAuditoriumInput>
  }

  export type AuditoriumTypeUpdateWithoutAuditoriumInput = {
    auditorium_type?: StringFieldUpdateOperationsInput | string
    auditorium_typename?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriumTypeUncheckedUpdateWithoutAuditoriumInput = {
    auditorium_type?: StringFieldUpdateOperationsInput | string
    auditorium_typename?: StringFieldUpdateOperationsInput | string
  }

  export type PulpitCreateManyFacultyInput = {
    pulpit: string
    pulpit_name?: string | null
  }

  export type PulpitUpdateWithoutFacultyInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
    Subject?: SubjectUpdateManyWithoutPulpitNestedInput
    Teacher?: TeacherUpdateManyWithoutPulpitNestedInput
  }

  export type PulpitUncheckedUpdateWithoutFacultyInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
    Subject?: SubjectUncheckedUpdateManyWithoutPulpitNestedInput
    Teacher?: TeacherUncheckedUpdateManyWithoutPulpitNestedInput
  }

  export type PulpitUncheckedUpdateManyWithoutFacultyInput = {
    pulpit?: StringFieldUpdateOperationsInput | string
    pulpit_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubjectCreateManyPulpitInput = {
    subject: string
    subject_name: string
  }

  export type TeacherCreateManyPulpitInput = {
    teacher: string
    teacher_name?: string | null
  }

  export type SubjectUpdateWithoutPulpitInput = {
    subject?: StringFieldUpdateOperationsInput | string
    subject_name?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateWithoutPulpitInput = {
    subject?: StringFieldUpdateOperationsInput | string
    subject_name?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateManyWithoutPulpitInput = {
    subject?: StringFieldUpdateOperationsInput | string
    subject_name?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherUpdateWithoutPulpitInput = {
    teacher?: StringFieldUpdateOperationsInput | string
    teacher_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateWithoutPulpitInput = {
    teacher?: StringFieldUpdateOperationsInput | string
    teacher_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateManyWithoutPulpitInput = {
    teacher?: StringFieldUpdateOperationsInput | string
    teacher_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditoriumCreateManyAuditoriumTypeInput = {
    auditorium: string
    auditorium_name?: string | null
    auditorium_capacity?: number | null
  }

  export type AuditoriumUpdateWithoutAuditoriumTypeInput = {
    auditorium?: StringFieldUpdateOperationsInput | string
    auditorium_name?: NullableStringFieldUpdateOperationsInput | string | null
    auditorium_capacity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AuditoriumUncheckedUpdateWithoutAuditoriumTypeInput = {
    auditorium?: StringFieldUpdateOperationsInput | string
    auditorium_name?: NullableStringFieldUpdateOperationsInput | string | null
    auditorium_capacity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AuditoriumUncheckedUpdateManyWithoutAuditoriumTypeInput = {
    auditorium?: StringFieldUpdateOperationsInput | string
    auditorium_name?: NullableStringFieldUpdateOperationsInput | string | null
    auditorium_capacity?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use FacultyCountOutputTypeDefaultArgs instead
     */
    export type FacultyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacultyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PulpitCountOutputTypeDefaultArgs instead
     */
    export type PulpitCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PulpitCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditoriumTypeCountOutputTypeDefaultArgs instead
     */
    export type AuditoriumTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditoriumTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FacultyDefaultArgs instead
     */
    export type FacultyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacultyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PulpitDefaultArgs instead
     */
    export type PulpitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PulpitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectDefaultArgs instead
     */
    export type SubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeacherDefaultArgs instead
     */
    export type TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditoriumTypeDefaultArgs instead
     */
    export type AuditoriumTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditoriumTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditoriumDefaultArgs instead
     */
    export type AuditoriumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditoriumDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}